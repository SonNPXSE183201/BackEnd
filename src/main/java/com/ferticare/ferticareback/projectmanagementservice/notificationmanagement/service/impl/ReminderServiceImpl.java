package com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.service.impl;

import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.entity.ReminderLog;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.repository.ReminderLogRepository;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.service.ReminderService;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.service.EmailService;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.Appointment;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.AppointmentRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.ServiceRequest;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.ServiceRequestRepository;
import com.ferticare.ferticareback.projectmanagementservice.usermanagement.entity.User;
import com.ferticare.ferticareback.projectmanagementservice.usermanagement.repository.UserRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.ServiceRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class ReminderServiceImpl implements ReminderService {

    @Autowired
    private ReminderLogRepository reminderLogRepository;

    @Autowired
    private AppointmentRepository appointmentRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ServiceRequestRepository serviceRequestRepository;

    @Autowired
    private ServiceRepository serviceRepository;

    @Autowired
    private EmailService emailService;

    @Scheduled(fixedRate = 3000) // Ch·∫°y m·ªói 5 ph√∫t (300000ms)
    public void processReminders() {
        System.out.println("üîÑ ƒêang ki·ªÉm tra reminders...");
        System.out.println("‚è∞ Th·ªùi gian hi·ªán t·∫°i: " + LocalDateTime.now());
        
        List<ReminderLog> reminders = reminderLogRepository
            .findByStatusAndChannelAndReminderTimeBefore("PENDING", "EMAIL", LocalDateTime.now());

        System.out.println("üìã T√¨m th·∫•y " + reminders.size() + " reminders c·∫ßn x·ª≠ l√Ω");

        for (ReminderLog reminder : reminders) {
            System.out.println("üîç Ki·ªÉm tra reminder: " + reminder.getReminderId());
            System.out.println("   - Reminder time: " + reminder.getReminderTime());
            System.out.println("   - Current time: " + LocalDateTime.now());
            
            try {
                // Ki·ªÉm tra xem c√≥ n√™n g·ª≠i reminder kh√¥ng
                if (shouldSendReminder(reminder)) {
                    System.out.println("‚úÖ ƒêi·ªÅu ki·ªán g·ª≠i email th·ªèa m√£n");
                    // G·ª≠i email nh·∫Øc nh·ªü
                    sendReminderEmail(reminder);
                    reminder.setStatus("SENT");
                    System.out.println("‚úÖ ƒê√£ g·ª≠i reminder cho appointment: " + reminder.getAppointmentId());
                } else {
                    // Ch∆∞a ƒë·∫øn th·ªùi ƒëi·ªÉm g·ª≠i, gi·ªØ nguy√™n status PENDING
                    System.out.println("‚è≥ Ch∆∞a ƒë·∫øn th·ªùi ƒëi·ªÉm g·ª≠i reminder cho appointment: " + reminder.getAppointmentId());
                }
            } catch (Exception e) {
                reminder.setStatus("FAILED");
                System.err.println("‚ùå L·ªói g·ª≠i reminder: " + e.getMessage());
                e.printStackTrace();
            }
            reminderLogRepository.save(reminder);
        }
    }

    private boolean shouldSendReminder(ReminderLog reminder) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime reminderTime = reminder.getReminderTime();
        
        // Ki·ªÉm tra xem ƒë√£ ƒë·∫øn th·ªùi ƒëi·ªÉm g·ª≠i reminder ch∆∞a
        // Cho ph√©p sai s·ªë 5 ph√∫t (tr∆∞·ªõc ho·∫∑c sau th·ªùi ƒëi·ªÉm d·ª± ki·∫øn)
        long minutesDiff = java.time.Duration.between(reminderTime, now).toMinutes();
        
        // G·ª≠i reminder n·∫øu ƒë√£ ƒë·∫øn th·ªùi ƒëi·ªÉm (c√≥ th·ªÉ s·ªõm ho·∫∑c mu·ªôn 5 ph√∫t)
        return Math.abs(minutesDiff) <= 5;
    }

    private void sendReminderEmail(ReminderLog reminder) {
        try {
            // L·∫•y th√¥ng tin appointment
            Appointment appointment = appointmentRepository.findById(reminder.getAppointmentId()).orElse(null);
            if (appointment == null) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y appointment: " + reminder.getAppointmentId());
                return;
            }

            // L·∫•y th√¥ng tin kh√°ch h√†ng
            User customer = userRepository.findById(appointment.getCustomerId()).orElse(null);
            if (customer == null) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y customer: " + appointment.getCustomerId());
                return;
            }

            // L·∫•y th√¥ng tin b√°c sƒ©
            User doctor = userRepository.findById(appointment.getDoctorId()).orElse(null);
            if (doctor == null) {
                System.err.println("‚ùå Kh√¥ng t√¨m th·∫•y doctor: " + appointment.getDoctorId());
                return;
            }

            // L·∫•y th√¥ng tin d·ªãch v·ª•
            String serviceName = "D·ªãch v·ª• kh√°m";
            ServiceRequest request = null;
            if (appointment.getRequestId() != null) {
                request = serviceRequestRepository.findById(appointment.getRequestId()).orElse(null);
                if (request != null && request.getServiceId() != null) {
                    com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.Service service = 
                        serviceRepository.findById(request.getServiceId()).orElse(null);
                    if (service != null) {
                        serviceName = service.getName();
                    }
                }
            }

            // ƒê·ªãnh d·∫°ng ng√†y gi·ªù
            String appointmentDate = appointment.getAppointmentTime() != null ? 
                appointment.getAppointmentTime().toLocalDate().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy")) : "";
            String appointmentTime = appointment.getAppointmentTime() != null ? 
                appointment.getAppointmentTime().toLocalTime().format(java.time.format.DateTimeFormatter.ofPattern("HH:mm")) : "";

            // T√≠nh th·ªùi gian c√≤n l·∫°i
            LocalDateTime now = LocalDateTime.now();
            long hoursDiff = java.time.Duration.between(now, appointment.getAppointmentTime()).toHours();
            String timeRemaining = hoursDiff == 24 ? "24 gi·ªù" : "2 gi·ªù";

            // T·∫°o notes v√† c√°c tr∆∞·ªùng ri√™ng bi·ªát
            String notes = request != null ? request.getNote() : "";
            String room = appointment.getRoom();
            String reminderMessage = "‚è∞ Nh·∫Øc nh·ªü: L·ªãch h·∫πn c·ªßa b·∫°n s·∫Ω di·ªÖn ra sau " + timeRemaining;

            // G·ª≠i email nh·∫Øc nh·ªü
            emailService.sendAppointmentConfirmationEmail(
                customer,
                doctor,
                serviceName,
                appointmentDate,
                appointmentTime,
                room,
                notes,
                reminderMessage
            );

            System.out.println("üìß ƒê√£ g·ª≠i email nh·∫Øc nh·ªü cho: " + customer.getEmail());
            System.out.println("   - Th·ªùi gian c√≤n l·∫°i: " + timeRemaining);
            System.out.println("   - Ng√†y h·∫πn: " + appointmentDate);
            System.out.println("   - Gi·ªù h·∫πn: " + appointmentTime);

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i email nh·∫Øc nh·ªü: " + e.getMessage());
            throw e;
        }
    }
} 