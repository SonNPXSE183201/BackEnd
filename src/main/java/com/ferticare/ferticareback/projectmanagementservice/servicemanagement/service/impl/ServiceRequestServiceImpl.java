package com.ferticare.ferticareback.projectmanagementservice.servicemanagement.service.impl;

import com.ferticare.ferticareback.projectmanagementservice.configuration.security.auth.JwtUtil;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.dto.AppointmentEmailDTO;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.service.AppointmentEmailService;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.entity.ReminderLog;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.repository.ReminderLogRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.service.ServiceRequestService;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.Appointment;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.DoctorWorkSchedule;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.AppointmentRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.DoctorWorkScheduleRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.ServiceRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.dto.ServiceRequestDTO;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.ServiceRequest;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.ServiceRequestRepository;
import com.ferticare.ferticareback.projectmanagementservice.usermanagement.entity.User;
import com.ferticare.ferticareback.projectmanagementservice.usermanagement.repository.UserRepository;
import com.ferticare.ferticareback.projectmanagementservice.profile.entity.Profile;
import com.ferticare.ferticareback.projectmanagementservice.profile.repository.ProfileRepository;
import com.ferticare.ferticareback.projectmanagementservice.treatmentmanagement.dto.request.ClinicalResultRequest;
import com.ferticare.ferticareback.projectmanagementservice.treatmentmanagement.service.ClinicalResultService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.TreatmentScheduleRepository;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;
import java.util.HashMap;
import java.util.stream.IntStream;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.config.AppointmentLimitConfig;

@Service
@RequiredArgsConstructor
public class ServiceRequestServiceImpl implements ServiceRequestService {

    private final ServiceRequestRepository requestRepository;
    private final AppointmentRepository appointmentRepository;
    private final UserRepository userRepository;
    private final ServiceRepository serviceRepository;
    private final ProfileRepository profileRepository;
    private final DoctorWorkScheduleRepository doctorWorkScheduleRepository;
    private final JwtUtil jwtUtil;
    private final AppointmentEmailService appointmentEmailService;
    private final ReminderLogRepository reminderLogRepository;
    private final ClinicalResultService clinicalResultService;
    private final TreatmentScheduleRepository treatmentScheduleRepository;
    private final AppointmentLimitConfig appointmentLimitConfig;

    @Override
    public ResponseEntity<?> handleRequest(UUID userId, ServiceRequestDTO dto) {
        Optional<User> userOpt = userRepository.findById(userId);
        if (userOpt.isEmpty()) {
            System.out.println(">>> Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i: " + userId);
            return ResponseEntity.status(404).body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i");
        }
        User user = userOpt.get();

        // L·∫•y t√™n chuy√™n m√¥n t·ª´ ID d·ªãch v·ª•
        String specialty = serviceRepository.findById(dto.getServiceId())
                .map(s -> s.getName())
                .orElse(null);

        if (specialty == null) {
            System.out.println(">>> Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•: " + dto.getServiceId());
            return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•.");
        }

        System.out.println(">>> T√™n chuy√™n m√¥n t·ª´ d·ªãch v·ª•: " + specialty);

        // L·∫•y danh s√°ch b√°c sƒ© theo chuy√™n m√¥n (ƒë√£ active)
        List<User> doctors = userRepository.findFirstAvailableDoctorExcluding(
            List.of(UUID.randomUUID()), // Kh√¥ng lo·∫°i tr·ª´ ai
            specialty,
            PageRequest.of(0, 100) // L·∫•y t·ªëi ƒëa 100 b√°c sƒ©
        );
        System.out.println(">>> T·ªïng s·ªë b√°c sƒ© c√≥ chuy√™n m√¥n " + specialty + ": " + doctors.size());
        for (User doctor : doctors) {
            System.out.println("Doctor ID: " + doctor.getId() + ", Name: " + doctor.getFullName());
        }

        LocalDateTime preferredTime = dto.getAppointmentTime();

        // üÜï Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l·ªãch h·∫πn c·ªßa customer
        ResponseEntity<?> limitCheck = checkCustomerAppointmentLimit(userId);
        if (limitCheck != null) {
            System.out.println(">>> Customer " + userId + " v∆∞·ª£t qu√° gi·ªõi h·∫°n l·ªãch h·∫πn");
            return limitCheck;
        }

        // Validate ng√†y ƒë·∫∑t l·ªãch (ph·∫£i ƒë·∫∑t tr∆∞·ªõc 1 ng√†y)
        if (!isValidAppointmentDate(preferredTime)) {
            System.out.println(">>> Ng√†y ƒë·∫∑t l·ªãch kh√¥ng h·ª£p l·ªá: " + preferredTime);
            return ResponseEntity.badRequest().body("Vui l√≤ng ƒë·∫∑t l·ªãch tr∆∞·ªõc √≠t nh·∫•t 1 ng√†y!");
        }

        // Ki·ªÉm tra duplicate request (c√πng customer, service, th·ªùi gian)
        boolean duplicateExists = requestRepository.existsByCustomerIdAndServiceIdAndPreferredDatetime(
                userId, dto.getServiceId(), preferredTime);
        
        if (duplicateExists) {
            System.out.println(">>> Request tr√πng l·∫∑p: customer=" + userId + ", service=" + dto.getServiceId() + ", time=" + preferredTime);
            return ResponseEntity.badRequest().body("B·∫°n ƒë√£ c√≥ l·ªãch h·∫πn cho d·ªãch v·ª• n√†y v√†o th·ªùi gian n√†y r·ªìi!");
        }

        // T·∫°o b·∫£n ghi y√™u c·∫ßu
        ServiceRequest request = new ServiceRequest();
        request.setCustomerId(userId);
        request.setServiceId(dto.getServiceId());
        request.setPreferredDatetime(preferredTime);
        request.setNote(dto.getNote());
        request.setDoctorSelection(dto.getDoctorSelection());
        request.setPreferredDoctorId("manual".equalsIgnoreCase(dto.getDoctorSelection()) ? dto.getDoctorId() : null);
        request.setStatus("PendingAssignment");
        requestRepository.save(request);

        UUID assignedDoctorId;

        if ("manual".equalsIgnoreCase(dto.getDoctorSelection())) {
            System.out.println(">>> Ch·∫ø ƒë·ªô ch·ªçn b√°c sƒ©: TH·ª¶ C√îNG");
            boolean isBusy = appointmentRepository.existsByDoctorIdAndAppointmentTime(dto.getDoctorId(), preferredTime);
            System.out.println(">>> B√°c sƒ© " + dto.getDoctorId() + " c√≥ b·ªã tr√πng gi·ªù " + preferredTime + ": " + isBusy);
            if (isBusy) {
                return ResponseEntity.badRequest().body("B√°c sƒ© ƒë√£ b·ªã tr√πng l·ªãch. Vui l√≤ng ch·ªçn gi·ªù kh√°c");
            }
            assignedDoctorId = dto.getDoctorId();
        } else {
            System.out.println(">>> Ch·∫ø ƒë·ªô ch·ªçn b√°c sƒ©: T·ª∞ ƒê·ªòNG");
            List<UUID> busyDoctorIds = appointmentRepository.findDoctorIdsBusyAt(preferredTime);
            System.out.println(">>> B√°c sƒ© b·∫≠n t·∫°i " + preferredTime + ": " + busyDoctorIds);

            // G·ªçi danh s√°ch b√°c sƒ© kh√¥ng b·∫≠n
            PageRequest pageRequest = PageRequest.of(0, 1);
            List<User> availableDoctors = userRepository.findFirstAvailableDoctorExcluding(
                    busyDoctorIds.isEmpty() ? List.of(UUID.randomUUID()) : busyDoctorIds,
                    specialty,
                    pageRequest
            );

            System.out.println(">>> S·ªë b√°c sƒ© r·∫£nh: " + availableDoctors.size());
            availableDoctors.forEach(doc -> System.out.println("R·∫£nh: " + doc.getId() + " - " + doc.getFullName()));

            if (availableDoctors.isEmpty()) {
                return ResponseEntity.badRequest().body("Kh√¥ng c√≥ b√°c sƒ© ph√π h·ª£p r·∫£nh v√†o gi·ªù n√†y.");
            }
            assignedDoctorId = availableDoctors.get(0).getId();
        }

        // C·∫≠p nh·∫≠t preferredDoctorId trong ServiceRequest v·ªõi b√°c sƒ© ƒë√£ ƒë∆∞·ª£c assign
        request.setPreferredDoctorId(assignedDoctorId);
        request.setStatus("Scheduled");
        requestRepository.save(request);

        // T·∫°o l·ªãch h·∫πn
        createAppointment(assignedDoctorId, userId, preferredTime, request.getRequestId());

        // G·ª≠i email x√°c nh·∫≠n l·ªãch h·∫πn
        try {
            User doctor = userRepository.findById(assignedDoctorId).orElse(null);
            if (doctor != null) {
                DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
                
                String appointmentDate = preferredTime.toLocalDate().format(dateFormatter);
                String appointmentTime = preferredTime.toLocalTime().format(timeFormatter);
                
                // L·∫•y s·ªë ph√≤ng t·ª´ l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©
                String room = getRoomForDoctor(assignedDoctorId, preferredTime);
                
                AppointmentEmailDTO emailDTO = AppointmentEmailDTO.builder()
                    .customerName(user.getFullName())
                    .customerEmail(user.getEmail())
                    .doctorName(doctor.getFullName())
                    .serviceName(specialty)
                    .appointmentDate(appointmentDate)
                    .appointmentTime(appointmentTime)
                    .room(room)
                    .notes(dto.getNote())
                    .status("Scheduled")
                    .build();
                
                appointmentEmailService.sendAppointmentConfirmation(emailDTO);
            }
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi g·ª≠i email x√°c nh·∫≠n l·ªãch h·∫πn: " + e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn qu√° tr√¨nh ƒëƒÉng k√Ω l·ªãch
        }

        // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ customer profile
        Optional<Profile> customerProfileOpt = profileRepository.findByUser_Id(userId);
        Profile customerProfile = customerProfileOpt.orElse(null);
        
        // L·∫•y th√¥ng tin ƒë·∫ßy ƒë·ªß t·ª´ doctor profile  
        User doctor = userRepository.findById(assignedDoctorId).orElse(null);
        Optional<Profile> doctorProfileOpt = doctor != null ? profileRepository.findByUser_Id(doctor.getId()) : Optional.empty();
        Profile doctorProfile = doctorProfileOpt.orElse(null);
        
        // T·∫°o response v·ªõi th√¥ng tin ƒë·∫ßy ƒë·ªß
        Map<String, Object> response = new HashMap<>();
        response.put("id", request.getRequestId());
        
        // Customer info t·ª´ profile
        Map<String, Object> customerInfo = new HashMap<>();
        customerInfo.put("fullName", user.getFullName());
        customerInfo.put("email", user.getEmail());
        customerInfo.put("phone", user.getPhone());
        customerInfo.put("address", user.getAddress());
        customerInfo.put("gender", user.getGender() != null ? user.getGender().name() : null);
        customerInfo.put("dateOfBirth", user.getDateOfBirth());
        customerInfo.put("avatarUrl", user.getAvatarUrl());
        
        if (customerProfile != null) {
            customerInfo.put("maritalStatus", customerProfile.getMaritalStatus());
            customerInfo.put("healthBackground", customerProfile.getHealthBackground());
        }
        response.put("customer", customerInfo);
        
        // Service info
        response.put("service", Map.of("id", dto.getServiceId(), "name", specialty));
        
        // Doctor info t·ª´ profile
        if (doctor != null) {
            Map<String, Object> doctorInfo = new HashMap<>();
            doctorInfo.put("id", doctor.getId());
            doctorInfo.put("fullName", doctor.getFullName());
            doctorInfo.put("email", doctor.getEmail());
            doctorInfo.put("phone", doctor.getPhone());
            doctorInfo.put("gender", doctor.getGender() != null ? doctor.getGender().name() : null);
            doctorInfo.put("avatarUrl", doctor.getAvatarUrl());
            
            if (doctorProfile != null) {
                doctorInfo.put("specialty", doctorProfile.getSpecialty());
                doctorInfo.put("qualification", doctorProfile.getQualification());
                doctorInfo.put("experienceYears", doctorProfile.getExperienceYears());
                doctorInfo.put("rating", doctorProfile.getRating());
                doctorInfo.put("caseCount", doctorProfile.getCaseCount());
            }
            response.put("doctor", doctorInfo);
        } else {
            response.put("doctor", null);
        }
        
        // Appointment info
        response.put("appointmentDate", preferredTime != null ? preferredTime.toLocalDate() : null);
        response.put("appointmentTime", preferredTime != null ? preferredTime.toLocalTime() : null);
        response.put("notes", dto.getNote());
        response.put("status", request.getStatus());
        response.put("doctorSelection", dto.getDoctorSelection());
        response.put("createdAt", request.getCreatedAt());

        return ResponseEntity.ok(response);
    }

    private void createAppointment(UUID doctorId, UUID customerId, LocalDateTime time, UUID requestId) {
        Appointment appointment = new Appointment();
        appointment.setAppointmentId(UUID.randomUUID());
        appointment.setDoctorId(doctorId);
        appointment.setCustomerId(customerId);
        appointment.setAppointmentTime(time);
        appointment.setRequestId(requestId);
        // L·∫•y s·ªë ph√≤ng t·ª´ l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©
        String room = getRoomForDoctor(doctorId, time);
        appointment.setRoom(room);
        appointment.setCreatedAt(LocalDateTime.now());
        appointment.setUpdatedAt(LocalDateTime.now());
        appointment.setCheckInStatus("Pending");
        appointmentRepository.save(appointment);

        // T·∫°o ReminderLog entries cho 24h v√† 2h reminders
        createReminderLogs(appointment.getAppointmentId(), time);

        // T·ª∞ ƒê·ªòNG T·∫†O CLINICAL RESULT R·ªñNG
        ClinicalResultRequest clinicalResultRequest = new ClinicalResultRequest();
        clinicalResultRequest.setAppointmentId(appointment.getAppointmentId());
        clinicalResultRequest.setPatientId(customerId);
        clinicalResultRequest.setDoctorId(doctorId);
        clinicalResultService.createClinicalResultWithDoctor(clinicalResultRequest, doctorId.toString());
    }

    /**
     * T·∫°o ReminderLog entries cho appointment
     */
    private void createReminderLogs(UUID appointmentId, LocalDateTime appointmentTime) {
        try {
            // T·∫°o reminder 24 gi·ªù tr∆∞·ªõc
            ReminderLog reminder24h = ReminderLog.builder()
                .reminderId(UUID.randomUUID())
                .appointmentId(appointmentId)
                .reminderTime(appointmentTime.minusHours(24))
                .channel("EMAIL")
                .status("PENDING")
                .build();
            reminderLogRepository.save(reminder24h);
            
            // T·∫°o reminder 2 gi·ªù tr∆∞·ªõc
            ReminderLog reminder2h = ReminderLog.builder()
                .reminderId(UUID.randomUUID())
                .appointmentId(appointmentId)
                .reminderTime(appointmentTime.minusHours(2))
                .channel("EMAIL")
                .status("PENDING")
                .build();
            reminderLogRepository.save(reminder2h);
            
            System.out.println("‚úÖ ƒê√£ t·∫°o ReminderLog cho appointment " + appointmentId + 
                             " - 24h: " + reminder24h.getReminderTime() + 
                             " - 2h: " + reminder2h.getReminderTime());
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi t·∫°o ReminderLog: " + e.getMessage());
        }
    }

    /**
     * L·∫•y s·ªë ph√≤ng cho b√°c sƒ© d·ª±a tr√™n l·ªãch l√†m vi·ªác
     */
    private String getRoomForDoctor(UUID doctorId, LocalDateTime appointmentTime) {
        try {
            // L·∫•y ng√†y trong tu·∫ßn (2=Th·ª© 2, 3=Th·ª© 3, ..., 8=Ch·ªß nh·∫≠t)
            int dayOfWeek = appointmentTime.getDayOfWeek().getValue();
            LocalTime time = appointmentTime.toLocalTime();
            
            System.out.println("üîç T√¨m ph√≤ng cho b√°c sƒ© " + doctorId + " v√†o " + dayOfWeek + " l√∫c " + time);
            
            // T√¨m l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© trong ng√†y n√†y
            List<DoctorWorkSchedule> schedules = doctorWorkScheduleRepository.findByDoctorIdAndDayOfWeek(doctorId, dayOfWeek);
            
            System.out.println("üìÖ T√¨m th·∫•y " + schedules.size() + " l·ªãch l√†m vi·ªác");
            
            // T√¨m l·ªãch ph√π h·ª£p v·ªõi th·ªùi gian
            for (DoctorWorkSchedule schedule : schedules) {
                if (time.isAfter(schedule.getStartTime().minusMinutes(1)) && 
                    time.isBefore(schedule.getEndTime().plusMinutes(1))) {
                    System.out.println("‚úÖ T√¨m th·∫•y ph√≤ng: " + schedule.getRoom());
                    return schedule.getRoom();
                }
            }
            
            // N·∫øu kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ ph√≤ng m·∫∑c ƒë·ªãnh
            System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph√≤ng, d√πng ph√≤ng m·∫∑c ƒë·ªãnh");
            return "Ph√≤ng ch·ªù";
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y s·ªë ph√≤ng cho b√°c sƒ© " + doctorId + ": " + e.getMessage());
            return "Ph√≤ng ch·ªù";
        }
    }

    /**
     * Validate ng√†y ƒë·∫∑t l·ªãch (ph·∫£i ƒë·∫∑t tr∆∞·ªõc 1 ng√†y)
     */
    private boolean isValidAppointmentDate(LocalDateTime appointmentTime) {
        LocalDateTime now = LocalDateTime.now();
        LocalDateTime tomorrow = now.plusDays(1).withHour(0).withMinute(0).withSecond(0).withNano(0);
        
        return appointmentTime.isAfter(tomorrow) || appointmentTime.toLocalDate().isAfter(now.toLocalDate());
    }

    /**
     * üÜï Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l·ªãch h·∫πn c·ªßa customer
     */
    private ResponseEntity<?> checkCustomerAppointmentLimit(UUID customerId) {
        // Ki·ªÉm tra xem t√≠nh nƒÉng c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
        if (!appointmentLimitConfig.isEnabled()) {
            return null; // Kh√¥ng ki·ªÉm tra n·∫øu t√≠nh nƒÉng b·ªã t·∫Øt
        }
        
        LocalDateTime now = LocalDateTime.now();
        
        // Ki·ªÉm tra t·ªïng s·ªë l·ªãch h·∫πn
        long totalAppointments = appointmentRepository.countByCustomerId(customerId);
        if (totalAppointments >= appointmentLimitConfig.getMaxAppointmentsPerCustomer()) {
            return ResponseEntity.badRequest().body(
                String.format("B·∫°n ƒë√£ c√≥ %d l·ªãch h·∫πn. Gi·ªõi h·∫°n t·ªëi ƒëa l√† %d l·ªãch h·∫πn. Vui l√≤ng ho√†n th√†nh l·ªãch h·∫πn hi·ªán t·∫°i tr∆∞·ªõc khi ƒë·∫∑t l·ªãch m·ªõi.", 
                    totalAppointments, appointmentLimitConfig.getMaxAppointmentsPerCustomer())
            );
        }
        
        // Ki·ªÉm tra s·ªë l·ªãch h·∫πn pending
        long pendingAppointments = appointmentRepository.countPendingByCustomerId(customerId);
        if (pendingAppointments >= appointmentLimitConfig.getMaxPendingAppointments()) {
            return ResponseEntity.badRequest().body(
                String.format("B·∫°n ƒë√£ c√≥ %d l·ªãch h·∫πn ƒëang ch·ªù. Ch·ªâ ƒë∆∞·ª£c ph√©p c√≥ t·ªëi ƒëa %d l·ªãch h·∫πn pending. Vui l√≤ng ho√†n th√†nh l·ªãch h·∫πn hi·ªán t·∫°i tr∆∞·ªõc khi ƒë·∫∑t l·ªãch m·ªõi.", 
                    pendingAppointments, appointmentLimitConfig.getMaxPendingAppointments())
            );
        }
        
        // Ki·ªÉm tra s·ªë l·ªãch h·∫πn trong t∆∞∆°ng lai
        long futureAppointments = appointmentRepository.countFutureByCustomerId(customerId, now);
        if (futureAppointments >= appointmentLimitConfig.getMaxFutureAppointments()) {
            return ResponseEntity.badRequest().body(
                String.format("B·∫°n ƒë√£ c√≥ %d l·ªãch h·∫πn trong t∆∞∆°ng lai. Gi·ªõi h·∫°n t·ªëi ƒëa l√† %d l·ªãch h·∫πn. Vui l√≤ng ho√†n th√†nh l·ªãch h·∫πn hi·ªán t·∫°i tr∆∞·ªõc khi ƒë·∫∑t l·ªãch m·ªõi.", 
                    futureAppointments, appointmentLimitConfig.getMaxFutureAppointments())
            );
        }
        
        return null; // Kh√¥ng c√≥ l·ªói
    }

    /**
     * üÜï L·∫•y th√¥ng tin l·ªãch h·∫πn hi·ªán t·∫°i c·ªßa customer
     */
    private Map<String, Object> getCustomerAppointmentInfo(UUID customerId) {
        LocalDateTime now = LocalDateTime.now();
        Map<String, Object> info = new HashMap<>();
        
        info.put("totalAppointments", appointmentRepository.countByCustomerId(customerId));
        info.put("pendingAppointments", appointmentRepository.countPendingByCustomerId(customerId));
        info.put("futureAppointments", appointmentRepository.countFutureByCustomerId(customerId, now));
        info.put("maxAppointments", appointmentLimitConfig.getMaxAppointmentsPerCustomer());
        info.put("maxPendingAppointments", appointmentLimitConfig.getMaxPendingAppointments());
        info.put("maxFutureAppointments", appointmentLimitConfig.getMaxFutureAppointments());
        
        // L·∫•y danh s√°ch l·ªãch h·∫πn trong t∆∞∆°ng lai
        List<Appointment> futureAppointments = appointmentRepository.findFutureByCustomerId(customerId, now);
        List<Map<String, Object>> appointmentList = futureAppointments.stream()
            .map(appointment -> {
                Map<String, Object> appointmentInfo = new HashMap<>();
                appointmentInfo.put("appointmentId", appointment.getAppointmentId());
                appointmentInfo.put("appointmentTime", appointment.getAppointmentTime());
                appointmentInfo.put("room", appointment.getRoom());
                appointmentInfo.put("checkInStatus", appointment.getCheckInStatus());
                
                // L·∫•y th√¥ng tin b√°c sƒ©
                User doctor = userRepository.findById(appointment.getDoctorId()).orElse(null);
                if (doctor != null) {
                    appointmentInfo.put("doctorName", doctor.getFullName());
                }
                
                return appointmentInfo;
            })
            .collect(Collectors.toList());
        
        info.put("currentAppointments", appointmentList);
        
        return info;
    }

    /**
     * L·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ© c·ª• th·ªÉ
     */
    @Override
    public ResponseEntity<?> getDoctorSchedule(UUID doctorId) {
        try {
            List<DoctorWorkSchedule> schedules = doctorWorkScheduleRepository.findByDoctorId(doctorId);
            
            User doctor = userRepository.findById(doctorId).orElse(null);
            if (doctor == null) {
                return ResponseEntity.notFound().build();
            }
            
            Map<String, Object> result = new HashMap<>();
            result.put("doctorId", doctorId);
            result.put("doctorName", doctor.getFullName());
            
            List<Map<String, Object>> scheduleList = schedules.stream()
                .map(schedule -> {
                    Map<String, Object> scheduleMap = new HashMap<>();
                    scheduleMap.put("dayOfWeek", schedule.getDayOfWeek());
                    scheduleMap.put("dayName", getDayName(schedule.getDayOfWeek()));
                    scheduleMap.put("startTime", schedule.getStartTime());
                    scheduleMap.put("endTime", schedule.getEndTime());
                    scheduleMap.put("room", schedule.getRoom());
                    return scheduleMap;
                })
                .collect(Collectors.toList());
            
            result.put("schedules", scheduleList);
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©: " + e.getMessage());
            return ResponseEntity.status(500).body("L·ªói khi l·∫•y l·ªãch l√†m vi·ªác");
        }
    }

    /**
     * Chuy·ªÉn ƒë·ªïi s·ªë ng√†y th√†nh t√™n ng√†y
     */
    private String getDayName(Integer dayOfWeek) {
        switch (dayOfWeek) {
            case 1: return "Th·ª© 2";    // MONDAY
            case 2: return "Th·ª© 3";    // TUESDAY
            case 3: return "Th·ª© 4";    // WEDNESDAY
            case 4: return "Th·ª© 5";    // THURSDAY
            case 5: return "Th·ª© 6";    // FRIDAY
            case 6: return "Th·ª© 7";    // SATURDAY
            case 7: return "Ch·ªß nh·∫≠t"; // SUNDAY
            default: return "Kh√¥ng x√°c ƒë·ªãnh";
        }
    }

    private String getServiceNameById(UUID serviceId) {
        return serviceRepository.findById(serviceId)
                .map(s -> s.getName())  // ho·∫∑c s -> ((com.ferticare...)s).getName()
                .orElse("Unknown Service");
    }

    /**
     * L·∫•y danh s√°ch b√°c sƒ© r·∫£nh theo d·ªãch v·ª•
     */
    @Override
    public ResponseEntity<?> getAvailableDoctorsByService(UUID serviceId) {
        try {
            // L·∫•y t√™n chuy√™n m√¥n t·ª´ ID d·ªãch v·ª•
            String specialty = serviceRepository.findById(serviceId)
                    .map(s -> s.getName())
                    .orElse(null);
                    
            if (specialty == null) {
                return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y d·ªãch v·ª•.");
            }
            
            // L·∫•y t·∫•t c·∫£ b√°c sƒ© c√≥ chuy√™n ng√†nh n√†y v√† ƒëang active
            List<User> doctors = userRepository.findFirstAvailableDoctorExcluding(
                List.of(UUID.randomUUID()), // Kh√¥ng lo·∫°i tr·ª´ ai
                specialty,
                PageRequest.of(0, 100) // L·∫•y t·ªëi ƒëa 100 b√°c sƒ©
            );
            
            List<Map<String, Object>> doctorList = new ArrayList<>();
            
            for (User doctor : doctors) {
                // L·∫•y l·ªãch l√†m vi·ªác m·ªõi t·ª´ b·∫£ng doctor_work_schedule
                List<DoctorWorkSchedule> schedules = doctorWorkScheduleRepository.findByDoctorId(doctor.getId());
                
                if (!schedules.isEmpty()) {
                    Map<String, Object> doctorInfo = new HashMap<>();
                    doctorInfo.put("id", doctor.getId());
                    doctorInfo.put("name", doctor.getFullName());
                    doctorInfo.put("specialty", specialty);
                    
                    // Chuy·ªÉn ƒë·ªïi l·ªãch l√†m vi·ªác th√†nh format m·ªõi
                    List<Map<String, Object>> workSchedule = schedules.stream()
                        .map(schedule -> {
                            Map<String, Object> scheduleMap = new HashMap<>();
                            scheduleMap.put("dayOfWeek", schedule.getDayOfWeek());
                            scheduleMap.put("dayName", getDayName(schedule.getDayOfWeek()));
                            scheduleMap.put("startTime", schedule.getStartTime().toString());
                            scheduleMap.put("endTime", schedule.getEndTime().toString());
                            scheduleMap.put("room", schedule.getRoom());
                            return scheduleMap;
                        })
                        .collect(Collectors.toList());
                    
                    doctorInfo.put("workSchedule", workSchedule);
                    doctorList.add(doctorInfo);
                }
            }
            return ResponseEntity.ok(doctorList);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y danh s√°ch b√°c sƒ©: " + e.getMessage());
            return ResponseEntity.status(500).body("L·ªói khi l·∫•y danh s√°ch b√°c sƒ©");
        }
    }
    
    /**
     * L·∫•y th·ªùi gian r·∫£nh c·ªßa b√°c sƒ© trong ng√†y
     */
    @Override
    public ResponseEntity<?> getDoctorAvailableTimes(UUID doctorId, LocalDate date) {
        if (date != null) {
            // Logic: tr·∫£ v·ªÅ slot c·ªßa 1 ng√†y, lo·∫°i tr·ª´ c·∫£ appointment v√† treatment_schedule
            try {
                int dayOfWeek = date.getDayOfWeek().getValue();
                List<DoctorWorkSchedule> schedules = doctorWorkScheduleRepository.findByDoctorIdAndDayOfWeek(doctorId, dayOfWeek);
                if (schedules.isEmpty()) {
                    return ResponseEntity.ok(List.of());
                }
                LocalDateTime startOfDay = date.atStartOfDay();
                LocalDateTime endOfDay = date.atTime(23, 59, 59);
                List<LocalDateTime> bookedTimes = appointmentRepository.findAppointmentTimesByDoctorIdAndDateRange(
                        doctorId, startOfDay, endOfDay);
                Set<LocalDateTime> allBookedTimes = new HashSet<>(bookedTimes);
                List<Map<String, Object>> availableTimes = new ArrayList<>();
                for (DoctorWorkSchedule schedule : schedules) {
                    LocalTime startTime = schedule.getStartTime();
                    LocalTime endTime = schedule.getEndTime();
                    for (LocalTime currentTime = startTime; currentTime.isBefore(endTime); currentTime = currentTime.plusHours(1)) {
                        LocalDateTime dateTime = date.atTime(currentTime);
                        final LocalTime finalCurrentTime = currentTime;
                        boolean isAvailable = allBookedTimes.stream()
                                .noneMatch(bookedTime -> bookedTime.toLocalTime().equals(finalCurrentTime));
                        if (isAvailable) {
                            Map<String, Object> slot = new HashMap<>();
                            slot.put("time", currentTime.toString());
                            slot.put("dateTime", dateTime.toString());
                            slot.put("room", schedule.getRoom());
                            availableTimes.add(slot);
                        }
                    }
                }
                return ResponseEntity.ok(availableTimes);
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi l·∫•y th·ªùi gian r·∫£nh: " + e.getMessage());
                return ResponseEntity.status(500).body("L·ªói khi l·∫•y th·ªùi gian r·∫£nh");
            }
        } else {
            // Logic: tr·∫£ v·ªÅ slot c·ªßa 30 ng√†y t·ªõi (b·∫Øt ƒë·∫ßu t·ª´ ng√†y mai), lo·∫°i tr·ª´ c·∫£ appointment v√† treatment_schedule
            try {
                List<DoctorWorkSchedule> schedules = doctorWorkScheduleRepository.findByDoctorId(doctorId);
                if (schedules.isEmpty()) {
                    return ResponseEntity.ok(List.of());
                }
                LocalDate today = LocalDate.now();
                LocalDate endDate = today.plusDays(30);
                List<Map<String, Object>> allAvailableSlots = new ArrayList<>();
                for (LocalDate d = today.plusDays(1); !d.isAfter(endDate); d = d.plusDays(1)) {
                    int dayOfWeek = d.getDayOfWeek().getValue();
                    List<DoctorWorkSchedule> daySchedules = schedules.stream()
                        .filter(sch -> sch.getDayOfWeek().equals(dayOfWeek))
                        .toList();
                    if (daySchedules.isEmpty()) continue;
                    LocalDateTime startOfDay = d.atStartOfDay();
                    LocalDateTime endOfDay = d.atTime(23, 59, 59);
                    List<LocalDateTime> bookedTimes = appointmentRepository.findAppointmentTimesByDoctorIdAndDateRange(
                            doctorId, startOfDay, endOfDay);
                    Set<LocalDateTime> allBookedTimes = new HashSet<>(bookedTimes);
                    for (DoctorWorkSchedule schedule : daySchedules) {
                        LocalTime startTime = schedule.getStartTime();
                        LocalTime endTime = schedule.getEndTime();
                        for (LocalTime currentTime = startTime; currentTime.isBefore(endTime); currentTime = currentTime.plusHours(1)) {
                            LocalDateTime dateTime = d.atTime(currentTime);
                            final LocalTime finalCurrentTime = currentTime;
                            boolean isAvailable = allBookedTimes.stream()
                                    .noneMatch(bookedTime -> bookedTime.toLocalTime().equals(finalCurrentTime));
                            if (isAvailable) {
                                Map<String, Object> slot = new HashMap<>();
                                slot.put("date", d.toString());
                                slot.put("time", currentTime.toString());
                                slot.put("dateTime", dateTime.toString());
                                slot.put("room", schedule.getRoom());
                                allAvailableSlots.add(slot);
                            }
                        }
                    }
                }
                return ResponseEntity.ok(allAvailableSlots);
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi l·∫•y th·ªùi gian r·∫£nh nhi·ªÅu ng√†y: " + e.getMessage());
                return ResponseEntity.status(500).body("L·ªói khi l·∫•y th·ªùi gian r·∫£nh nhi·ªÅu ng√†y");
            }
        }
    }

    // New method with JWT authentication handling
    @Override
    public ResponseEntity<?> handleRequestWithAuth(ServiceRequestDTO dto, HttpServletRequest request) {
        try {
            String jwt = jwtUtil.extractJwtFromRequest(request);
            String userId = jwtUtil.extractUserId(jwt);
            return handleRequest(UUID.fromString(userId), dto);
        } catch (Exception e) {
            return ResponseEntity.status(400).body("Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá: " + e.getMessage());
        }
    }

    /**
     * L·∫•y danh s√°ch ng√†y c√≥ th·ªÉ ƒë·∫∑t l·ªãch trong 30 ng√†y t·ªõi
     */
    /**
     * üÜï API cho customer xem th√¥ng tin gi·ªõi h·∫°n l·ªãch h·∫πn c·ªßa m√¨nh
     */
    @Override
    public ResponseEntity<?> getCustomerAppointmentLimit(UUID customerId) {
        try {
            Map<String, Object> appointmentInfo = getCustomerAppointmentInfo(customerId);
            return ResponseEntity.ok(appointmentInfo);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("L·ªói: " + e.getMessage());
        }
    }

    @Override
    public ResponseEntity<?> getAvailableDates(UUID doctorId) {
        try {
            // L·∫•y l·ªãch l√†m vi·ªác c·ªßa b√°c sƒ©
            List<DoctorWorkSchedule> schedules = doctorWorkScheduleRepository.findByDoctorId(doctorId);
            
            if (schedules.isEmpty()) {
                return ResponseEntity.ok(List.of());
            }
            
            LocalDate today = LocalDate.now();
            LocalDate endDate = today.plusDays(30);
            
            List<Map<String, Object>> availableDates = new ArrayList<>();
            
            // Duy·ªát qua 30 ng√†y t·ªõi
            for (LocalDate date = today.plusDays(1); !date.isAfter(endDate); date = date.plusDays(1)) {
                int dayOfWeek = date.getDayOfWeek().getValue();
                
                // Ki·ªÉm tra xem b√°c sƒ© c√≥ l√†m vi·ªác v√†o ng√†y n√†y kh√¥ng
                boolean hasSchedule = schedules.stream()
                    .anyMatch(schedule -> schedule.getDayOfWeek().equals(dayOfWeek));
                
                if (hasSchedule) {
                    Map<String, Object> dateInfo = new HashMap<>();
                    dateInfo.put("date", date.toString());
                    dateInfo.put("dayOfWeek", dayOfWeek);
                    dateInfo.put("dayName", getDayName(dayOfWeek));
                    
                    // L·∫•y th√¥ng tin l·ªãch l√†m vi·ªác trong ng√†y
                    List<DoctorWorkSchedule> daySchedules = schedules.stream()
                        .filter(schedule -> schedule.getDayOfWeek().equals(dayOfWeek))
                        .collect(Collectors.toList());
                    
                    List<Map<String, Object>> timeSlots = daySchedules.stream()
                        .map(schedule -> {
                            Map<String, Object> slot = new HashMap<>();
                            slot.put("startTime", schedule.getStartTime().toString());
                            slot.put("endTime", schedule.getEndTime().toString());
                            slot.put("room", schedule.getRoom());
                            return slot;
                        })
                        .collect(Collectors.toList());
                    
                    dateInfo.put("timeSlots", timeSlots);
                    availableDates.add(dateInfo);
                }
            }
            
            return ResponseEntity.ok(availableDates);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y danh s√°ch ng√†y c√≥ th·ªÉ ƒë·∫∑t l·ªãch: " + e.getMessage());
            return ResponseEntity.status(500).body("L·ªói khi l·∫•y danh s√°ch ng√†y");
        }
    }

    /**
     * L·∫•y l·ªãch h·∫πn th·ª±c t·∫ø c·ªßa b√°c sƒ© theo ng√†y
     */
    @Override
    public ResponseEntity<?> getDoctorAppointments(UUID doctorId, LocalDate date) {
        try {
            LocalDateTime startOfDay = date.atStartOfDay();
            LocalDateTime endOfDay = date.atTime(23, 59, 59);
            
            // L·∫•y danh s√°ch appointment c·ªßa b√°c sƒ© trong ng√†y
            List<LocalDateTime> appointmentTimes = appointmentRepository.findAppointmentTimesByDoctorIdAndDateRange(
                    doctorId, startOfDay, endOfDay);
            
            List<Map<String, Object>> appointments = new ArrayList<>();
            
            for (LocalDateTime appointmentTime : appointmentTimes) {
                // L·∫•y th√¥ng tin chi ti·∫øt appointment
                List<Appointment> appointmentList = appointmentRepository.findAll().stream()
                    .filter(a -> a.getDoctorId().equals(doctorId) && a.getAppointmentTime().equals(appointmentTime))
                    .collect(Collectors.toList());
                
                if (!appointmentList.isEmpty()) {
                    Appointment appointment = appointmentList.get(0);
                    
                    // L·∫•y th√¥ng tin kh√°ch h√†ng
                    User customer = userRepository.findById(appointment.getCustomerId()).orElse(null);
                    
                    Map<String, Object> appointmentInfo = new HashMap<>();
                    appointmentInfo.put("appointmentId", appointment.getAppointmentId());
                    appointmentInfo.put("appointmentTime", appointment.getAppointmentTime());
                    appointmentInfo.put("room", appointment.getRoom());
                    appointmentInfo.put("checkInStatus", appointment.getCheckInStatus());
                    
                    if (customer != null) {
                        Map<String, Object> customerInfo = new HashMap<>();
                        customerInfo.put("name", customer.getFullName());
                        customerInfo.put("phone", customer.getPhone());
                        customerInfo.put("email", customer.getEmail());
                        appointmentInfo.put("customer", customerInfo);
                    }
                    
                    appointments.add(appointmentInfo);
                }
            }
            
            Map<String, Object> result = new HashMap<>();
            result.put("date", date.toString());
            result.put("doctorId", doctorId);
            result.put("totalAppointments", appointments.size());
            result.put("appointments", appointments);
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y l·ªãch h·∫πn c·ªßa b√°c sƒ©: " + e.getMessage());
            return ResponseEntity.status(500).body("L·ªói khi l·∫•y l·ªãch h·∫πn");
        }
    }

    /**
     * L·∫•y danh s√°ch b·ªánh nh√¢n c·ªßa b√°c sƒ© (t·ª´ t·∫•t c·∫£ appointments)
     */
    @Override
    public ResponseEntity<?> getDoctorPatients(UUID doctorId) {
        try {
            // L·∫•y t·∫•t c·∫£ appointments c·ªßa b√°c sƒ©
            List<Appointment> appointments = appointmentRepository.findAll().stream()
                    .filter(a -> a.getDoctorId().equals(doctorId))
                    .collect(Collectors.toList());
            
            // L·∫•y danh s√°ch unique patient IDs
            Set<UUID> patientIds = appointments.stream()
                    .map(Appointment::getCustomerId)
                    .collect(Collectors.toSet());
            
            List<Map<String, Object>> patients = new ArrayList<>();
            
            for (UUID patientId : patientIds) {
                User patient = userRepository.findById(patientId).orElse(null);
                if (patient != null) {
                    // L·∫•y th√¥ng tin profile c·ªßa b·ªánh nh√¢n
                    Optional<Profile> patientProfile = profileRepository.findByUser_Id(patientId);
                    
                    // ƒê·∫øm s·ªë l·∫ßn ƒë·∫øn kh√°m
                    long appointmentCount = appointments.stream()
                            .filter(a -> a.getCustomerId().equals(patientId))
                            .count();
                    
                    // L·∫•y l·ªãch h·∫πn g·∫ßn nh·∫•t
                    Optional<Appointment> latestAppointment = appointments.stream()
                            .filter(a -> a.getCustomerId().equals(patientId))
                            .max(Comparator.comparing(Appointment::getAppointmentTime));
                    
                    Map<String, Object> patientInfo = new HashMap<>();
                    patientInfo.put("patientId", patient.getId());
                    patientInfo.put("fullName", patient.getFullName());
                    patientInfo.put("email", patient.getEmail());
                    patientInfo.put("phone", patient.getPhone());
                    patientInfo.put("gender", patient.getGender() != null ? patient.getGender().name() : null);
                    patientInfo.put("dateOfBirth", patient.getDateOfBirth());
                    patientInfo.put("address", patient.getAddress());
                    patientInfo.put("avatarUrl", patient.getAvatarUrl());
                    patientInfo.put("appointmentCount", appointmentCount);
                    
                    if (latestAppointment.isPresent()) {
                        patientInfo.put("latestAppointment", latestAppointment.get().getAppointmentTime());
                        patientInfo.put("latestAppointmentStatus", latestAppointment.get().getCheckInStatus());
                    }
                    
                    if (patientProfile.isPresent()) {
                        Profile profile = patientProfile.get();
                        patientInfo.put("profileStatus", profile.getStatus());
                        patientInfo.put("maritalStatus", profile.getMaritalStatus());
                        patientInfo.put("healthBackground", profile.getHealthBackground());
                        patientInfo.put("notes", profile.getNotes());
                    }
                    
                    patients.add(patientInfo);
                }
            }
            
            // S·∫Øp x·∫øp theo l·ªãch h·∫πn g·∫ßn nh·∫•t
            patients.sort((p1, p2) -> {
                LocalDateTime time1 = (LocalDateTime) p1.get("latestAppointment");
                LocalDateTime time2 = (LocalDateTime) p2.get("latestAppointment");
                if (time1 == null && time2 == null) return 0;
                if (time1 == null) return 1;
                if (time2 == null) return -1;
                return time2.compareTo(time1); // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
            });
            
            Map<String, Object> result = new HashMap<>();
            result.put("doctorId", doctorId);
            result.put("totalPatients", patients.size());
            result.put("patients", patients);
            
            return ResponseEntity.ok(result);
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói khi l·∫•y danh s√°ch b·ªánh nh√¢n c·ªßa b√°c sƒ©: " + e.getMessage());
            return ResponseEntity.status(500).body("L·ªói khi l·∫•y danh s√°ch b·ªánh nh√¢n");
        }
    }
}