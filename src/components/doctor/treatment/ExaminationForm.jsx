import React, { useState, useEffect, useContext } from "react";
import {
  Card,
  Form,
  Input,
  InputNumber,
  Select,
  DatePicker,
  Upload,
  Button,
  Row,
  Col,
  Divider,
  Tag,
  Space,
  message,
  Table,
  Typography,
} from "antd";
import {
  UploadOutlined,
  PlusOutlined,
  DeleteOutlined,
} from "@ant-design/icons";
import { examinationAPI } from "../../../services/treatmentAPI";
import { UserContext } from "../../../context/UserContext";

const { TextArea } = Input;
const { Option } = Select;
const { Title, Text } = Typography;

const ExaminationForm = ({
  patientId,
  onNext,
  patientInfo,
  existingData,
  isEditing,
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const { user } = useContext(UserContext);
  const [symptoms, setSymptoms] = useState([]);
  const [labResults, setLabResults] = useState({});
  const [attachments, setAttachments] = useState([]);

  // Load existing data or draft when component initializes
  useEffect(() => {
    // Priority: existing data (when editing) > draft
    if (existingData && isEditing) {
      form.setFieldsValue({
        diagnosis: existingData.diagnosis,
        recommendations: existingData.recommendations,
        bloodPressure: existingData.clinicalSigns?.bloodPressure,
        temperature: existingData.clinicalSigns?.temperature,
        heartRate: existingData.clinicalSigns?.heartRate,
        weight: existingData.clinicalSigns?.weight,
        height: existingData.clinicalSigns?.height,
        ultrasound: existingData.labResults?.ultrasound,
        notes: existingData.notes,
      });
      setSymptoms(existingData.symptoms || []);
      setLabResults(existingData.labResults || {});
      message.info("üìù ƒêang ch·ªânh s·ª≠a k·∫øt qu·∫£ kh√°m hi·ªán c√≥");
      return;
    }

    const draftKey = `examination_draft_${patientId}`;
    const savedDraft = localStorage.getItem(draftKey);
    if (savedDraft) {
      try {
        const draft = JSON.parse(savedDraft);
        form.setFieldsValue(draft);
        setSymptoms(draft.symptoms || []);
        setLabResults(draft.labResults || {});
        message.info(`ƒê√£ t·∫£i b·∫£n nh√°p l∆∞u l√∫c: ${draft.savedAt}`);
      } catch (error) {
        console.error("Error loading draft:", error);
      }
    }
  }, [patientId, form, existingData, isEditing]);

  // Danh s√°ch tri·ªáu ch·ª©ng th∆∞·ªùng g·∫∑p
  const commonSymptoms = [
    "ƒëau b·ª•ng d∆∞·ªõi",
    "r·ªëi lo·∫°n kinh nguy·ªát",
    "ra m√°u b·∫•t th∆∞·ªùng",
    "ƒëau khi quan h·ªá",
    "v√¥ kinh",
    "kinh nguy·ªát kh√¥ng ƒë·ªÅu",
    "ƒëau l∆∞ng",
    "bu·ªìn n√¥n",
    "cƒÉng t·ª©c v√∫",
    "m·ªát m·ªèi",
  ];

  // C·∫•u h√¨nh x√©t nghi·ªám m√°u
  const bloodTestConfig = [
    { key: "FSH", label: "FSH (mIU/mL)", normalRange: "3.5-12.5" },
    { key: "LH", label: "LH (mIU/mL)", normalRange: "2.4-12.6" },
    { key: "E2", label: "Estradiol (pg/mL)", normalRange: "12.5-166.0" },
    {
      key: "testosterone",
      label: "Testosterone (ng/mL)",
      normalRange: "0.1-0.8",
    },
    { key: "AMH", label: "AMH (ng/mL)", normalRange: "1.0-4.0" },
    { key: "prolactin", label: "Prolactin (ng/mL)", normalRange: "4.8-23.3" },
  ];

  const handleSymptomAdd = (symptom) => {
    if (!symptoms.includes(symptom)) {
      setSymptoms([...symptoms, symptom]);
    }
  };

  const handleSymptomRemove = (symptom) => {
    setSymptoms(symptoms.filter((s) => s !== symptom));
  };

  const handleLabResultChange = (test, value) => {
    setLabResults((prev) => ({
      ...prev,
      bloodTest: {
        ...prev.bloodTest,
        [test]: value,
      },
    }));
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);

      // Validate required fields
      if (!values.diagnosis || !values.recommendations) {
        message.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ch·∫©n ƒëo√°n v√† khuy·∫øn ngh·ªã");
        return;
      }

      const examinationData = {
        id: existingData?.id || Date.now().toString(),
        patientId,
        doctorId: user?.id || "defaultDoctor",
        doctorName: user?.fullName || "B√°c sƒ©",
        examinationDate:
          existingData?.examinationDate ||
          new Date().toISOString().split("T")[0],
        symptoms,
        clinicalSigns: {
          bloodPressure: values.bloodPressure,
          temperature: values.temperature,
          heartRate: values.heartRate,
          weight: values.weight,
          height: values.height,
        },
        labResults: {
          ...labResults,
          ultrasound: values.ultrasound,
        },
        diagnosis: values.diagnosis,
        recommendations: values.recommendations,
        attachments: attachments.map((file) => file.name),
        notes: values.notes,
        status: "completed",
        // Enhanced metadata
        recommendedService: getRecommendedService(values.diagnosis),
        isEdited: isEditing,
        editedAt: isEditing ? new Date().toISOString() : undefined,
        originalData: isEditing ? existingData : undefined,
        createdAt: existingData?.createdAt || new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      // Save to API
      const savedResult = await examinationAPI.createExaminationResult(
        examinationData
      );

      // Clear draft after successful save (only if not editing)
      if (!isEditing) {
        localStorage.removeItem(`examination_draft_${patientId}`);
      }

      const actionText = isEditing ? "C·∫≠p nh·∫≠t" : "L∆∞u";
      message.success(
        `üéâ ${actionText} k·∫øt qu·∫£ kh√°m th√†nh c√¥ng!${
          isEditing ? "" : " Chuy·ªÉn sang l·∫≠p ph√°c ƒë·ªì..."
        }`
      );

      // Call onNext with the saved examination data
      if (onNext) {
        onNext(savedResult || examinationData);
      }
    } catch (error) {
      console.error("Error saving examination:", error);
      message.error("‚ùå C√≥ l·ªói x·∫£y ra khi l∆∞u k·∫øt qu·∫£ kh√°m. Vui l√≤ng th·ª≠ l·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  // Helper function to recommend service based on diagnosis
  const getRecommendedService = (diagnosis) => {
    const diagnosisLower = diagnosis.toLowerCase();

    if (
      diagnosisLower.includes("t·∫Øc ·ªëng d·∫´n tr·ª©ng") ||
      diagnosisLower.includes("tu·ªïi cao") ||
      diagnosisLower.includes("amh th·∫•p") ||
      diagnosisLower.includes("ph√¥i k√©m")
    ) {
      return "IVF";
    } else if (
      diagnosisLower.includes("r·ªëi lo·∫°n r·ª•ng tr·ª©ng") ||
      diagnosisLower.includes("tinh tr√πng y·∫øu") ||
      diagnosisLower.includes("v√¥ sinh nguy√™n ph√°t nh·∫π")
    ) {
      return "IUI";
    }

    return "IVF"; // Default recommendation
  };

  const uploadProps = {
    beforeUpload: (file) => {
      setAttachments((prev) => [...prev, file]);
      return false; // Prevent auto upload
    },
    onRemove: (file) => {
      setAttachments((prev) => prev.filter((f) => f.uid !== file.uid));
    },
    fileList: attachments,
  };

  return (
    <div style={{ padding: "24px", background: "#f5f5f5", minHeight: "100vh" }}>
      <Card>
        <Title level={2}>Kh√°m L√¢m S√†ng & Nh·∫≠p K·∫øt Qu·∫£</Title>

        {/* Th√¥ng tin b·ªánh nh√¢n */}
        <Card size="small" style={{ marginBottom: 24, background: "#f9f9f9" }}>
          <Title level={4}>Th√¥ng tin b·ªánh nh√¢n</Title>
          <Row gutter={16}>
            <Col span={6}>
              <Text strong>H·ªç t√™n:</Text> {patientInfo?.name || "N/A"}
            </Col>
            <Col span={6}>
              <Text strong>Gi·ªõi t√≠nh:</Text>{" "}
              {patientInfo?.gender === "male" ? "Nam" : "N·ªØ"}
            </Col>
            <Col span={6}>
              <Text strong>Ng√†y sinh:</Text> {patientInfo?.dob || "N/A"}
            </Col>
            <Col span={6}>
              <Text strong>Li√™n h·ªá:</Text> {patientInfo?.contact || "N/A"}
            </Col>
          </Row>
        </Card>

        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{
            temperature: "36.5",
            bloodPressure: "120/80",
            heartRate: "72",
          }}
        >
          <Row gutter={24}>
            {/* C·ªôt tr√°i - Tri·ªáu ch·ª©ng v√† d·∫•u hi·ªáu */}
            <Col span={12}>
              {/* Tri·ªáu ch·ª©ng */}
              <Card
                title="Tri·ªáu ch·ª©ng"
                size="small"
                style={{ marginBottom: 16 }}
              >
                <Space wrap style={{ marginBottom: 12 }}>
                  {commonSymptoms.map((symptom) => (
                    <Tag
                      key={symptom}
                      color={symptoms.includes(symptom) ? "blue" : "default"}
                      style={{ cursor: "pointer" }}
                      onClick={() =>
                        symptoms.includes(symptom)
                          ? handleSymptomRemove(symptom)
                          : handleSymptomAdd(symptom)
                      }
                    >
                      {symptom}
                    </Tag>
                  ))}
                </Space>
                <Input
                  placeholder="Nh·∫≠p tri·ªáu ch·ª©ng kh√°c..."
                  onPressEnter={(e) => {
                    if (e.target.value.trim()) {
                      handleSymptomAdd(e.target.value.trim());
                      e.target.value = "";
                    }
                  }}
                />
                <div style={{ marginTop: 8 }}>
                  <Text strong>Tri·ªáu ch·ª©ng ƒë√£ ch·ªçn:</Text>
                  <div style={{ marginTop: 4 }}>
                    {symptoms.map((symptom) => (
                      <Tag
                        key={symptom}
                        closable
                        color="blue"
                        onClose={() => handleSymptomRemove(symptom)}
                      >
                        {symptom}
                      </Tag>
                    ))}
                  </div>
                </div>
              </Card>

              {/* D·∫•u hi·ªáu l√¢m s√†ng */}
              <Card title="D·∫•u hi·ªáu l√¢m s√†ng" size="small">
                <Row gutter={12}>
                  <Col span={12}>
                    <Form.Item label="Huy·∫øt √°p" name="bloodPressure">
                      <Input placeholder="120/80" />
                    </Form.Item>
                  </Col>
                  <Col span={12}>
                    <Form.Item label="Nhi·ªát ƒë·ªô (¬∞C)" name="temperature">
                      <InputNumber
                        min={35}
                        max={42}
                        step={0.1}
                        style={{ width: "100%" }}
                      />
                    </Form.Item>
                  </Col>
                  <Col span={12}>
                    <Form.Item label="Nh·ªãp tim (l·∫ßn/ph√∫t)" name="heartRate">
                      <InputNumber
                        min={40}
                        max={200}
                        style={{ width: "100%" }}
                      />
                    </Form.Item>
                  </Col>
                  <Col span={12}>
                    <Form.Item label="C√¢n n·∫∑ng (kg)" name="weight">
                      <InputNumber
                        min={30}
                        max={200}
                        style={{ width: "100%" }}
                      />
                    </Form.Item>
                  </Col>
                  <Col span={12}>
                    <Form.Item label="Chi·ªÅu cao (cm)" name="height">
                      <InputNumber
                        min={140}
                        max={220}
                        style={{ width: "100%" }}
                      />
                    </Form.Item>
                  </Col>
                </Row>
              </Card>
            </Col>

            {/* C·ªôt ph·∫£i - X√©t nghi·ªám */}
            <Col span={12}>
              {/* X√©t nghi·ªám m√°u */}
              <Card
                title="X√©t nghi·ªám m√°u"
                size="small"
                style={{ marginBottom: 16 }}
              >
                <Row gutter={8}>
                  {bloodTestConfig.map((test) => (
                    <Col span={12} key={test.key} style={{ marginBottom: 8 }}>
                      <Text>{test.label}</Text>
                      <InputNumber
                        size="small"
                        placeholder={test.normalRange}
                        style={{ width: "100%", marginTop: 4 }}
                        onChange={(value) =>
                          handleLabResultChange(test.key, value)
                        }
                      />
                      <Text type="secondary" style={{ fontSize: "11px" }}>
                        B√¨nh th∆∞·ªùng: {test.normalRange}
                      </Text>
                    </Col>
                  ))}
                </Row>
              </Card>

              {/* Si√™u √¢m */}
              <Card title="K·∫øt qu·∫£ si√™u √¢m" size="small">
                <Form.Item name="ultrasound">
                  <TextArea rows={4} placeholder="M√¥ t·∫£ k·∫øt qu·∫£ si√™u √¢m..." />
                </Form.Item>
              </Card>
            </Col>
          </Row>

          <Divider />

          {/* Chu·∫©n ƒëo√°n v√† khuy·∫øn ngh·ªã */}
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item
                label="Chu·∫©n ƒëo√°n l√¢m s√†ng"
                name="diagnosis"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p chu·∫©n ƒëo√°n" },
                ]}
              >
                <TextArea rows={3} placeholder="Nh·∫≠p chu·∫©n ƒëo√°n..." />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item label="Khuy·∫øn ngh·ªã ƒëi·ªÅu tr·ªã" name="recommendations">
                <TextArea rows={3} placeholder="Nh·∫≠p khuy·∫øn ngh·ªã..." />
              </Form.Item>
            </Col>
          </Row>

          {/* Upload file ƒë√≠nh k√®m */}
          <Form.Item label="File ƒë√≠nh k√®m (·∫£nh si√™u √¢m, k·∫øt qu·∫£ x√©t nghi·ªám...)">
            <Upload {...uploadProps} multiple>
              <Button icon={<UploadOutlined />}>Ch·ªçn file</Button>
            </Upload>
          </Form.Item>

          {/* Ghi ch√∫ */}
          <Form.Item label="Ghi ch√∫" name="notes">
            <TextArea rows={2} placeholder="Ghi ch√∫ th√™m..." />
          </Form.Item>

          {/* B√°c sƒ© kh√°m - Hi·ªÉn th·ªã th√¥ng tin b√°c sƒ© ƒë√£ ƒëƒÉng nh·∫≠p */}
          <Card
            size="small"
            style={{ background: "#f0f8ff", marginBottom: 16 }}
          >
            <Row align="middle" gutter={16}>
              <Col>
                <div
                  style={{
                    width: 40,
                    height: 40,
                    borderRadius: "50%",
                    background: "#1890ff",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    color: "white",
                    fontWeight: "bold",
                  }}
                >
                  {user?.fullName?.charAt(0) || "BS"}
                </div>
              </Col>
              <Col flex={1}>
                <div>
                  <Text strong style={{ fontSize: "16px" }}>
                    B√°c sƒ© ph·ª• tr√°ch: {user?.fullName || "B√°c sƒ© chuy√™n khoa"}
                  </Text>
                  <br />
                  <Text type="secondary">
                    Chuy√™n khoa:{" "}
                    {user?.specialty || "S·∫£n ph·ª• khoa & H·ªó tr·ª£ sinh s·∫£n"}
                  </Text>
                  <br />
                  <Text type="secondary">
                    ID: {user?.id || "BS001"} | ƒê√£ ƒëƒÉng nh·∫≠p
                  </Text>
                </div>
              </Col>
            </Row>
          </Card>

          <div style={{ textAlign: "right", marginTop: 24 }}>
            <Space>
              <Button
                onClick={() => {
                  const draftData = form.getFieldsValue();
                  localStorage.setItem(
                    `examination_draft_${patientId}`,
                    JSON.stringify({
                      ...draftData,
                      symptoms,
                      labResults,
                      savedAt: new Date().toLocaleString(),
                    })
                  );
                  message.success("ƒê√£ l∆∞u b·∫£n nh√°p");
                }}
              >
                üíæ L∆∞u nh√°p
              </Button>
              <Button
                type="primary"
                htmlType="submit"
                loading={loading}
                size="large"
                style={{ minWidth: "200px" }}
              >
                ‚úÖ Ho√†n th√†nh kh√°m & L·∫≠p ph√°c ƒë·ªì
              </Button>
            </Space>
          </div>
        </Form>
      </Card>
    </div>
  );
};

export default ExaminationForm;
