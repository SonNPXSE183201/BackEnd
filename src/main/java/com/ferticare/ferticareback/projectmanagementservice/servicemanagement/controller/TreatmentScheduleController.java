package com.ferticare.ferticareback.projectmanagementservice.servicemanagement.controller;

import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.dto.TreatmentScheduleRequest;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.dto.ScheduleStatusUpdateRequest;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.TreatmentSchedule;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.TreatmentScheduleRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.AppointmentRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.repository.DoctorWorkScheduleRepository;
import com.ferticare.ferticareback.projectmanagementservice.servicemanagement.entity.DoctorWorkSchedule;
import com.ferticare.ferticareback.projectmanagementservice.notificationmanagement.service.EmailService;
import com.ferticare.ferticareback.projectmanagementservice.usermanagement.repository.UserRepository;
import com.ferticare.ferticareback.projectmanagementservice.usermanagement.entity.User;
import com.ferticare.ferticareback.common.exception.AppException;
import com.ferticare.ferticareback.common.dto.GenericResponse;
import com.ferticare.ferticareback.common.dto.MessageDTO;
import com.ferticare.ferticareback.projectmanagementservice.configuration.security.annotation.DoctorOnly;
import com.ferticare.ferticareback.projectmanagementservice.configuration.security.auth.JwtUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.time.LocalTime;
import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/treatment-schedule")
@RequiredArgsConstructor
@Slf4j
public class TreatmentScheduleController {
    private final TreatmentScheduleRepository treatmentScheduleRepository;
    private final AppointmentRepository appointmentRepository;
    private final DoctorWorkScheduleRepository doctorWorkScheduleRepository;
    private final EmailService emailService;
    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;

    @PostMapping
    public ResponseEntity<?> createTreatmentSchedule(@RequestBody TreatmentScheduleRequest request) {
        // ‚úÖ Ki·ªÉm tra conflict tr∆∞·ªõc khi t·∫°o schedule
        ResponseEntity<?> conflictCheck = checkScheduleConflict(request);
        if (conflictCheck != null) {
            return conflictCheck;
        }
        
        TreatmentSchedule schedule = new TreatmentSchedule();
        schedule.setPlanId(request.getPlanId());
        schedule.setStepNumber(request.getStepNumber());
        schedule.setStepName(request.getStepName());
        schedule.setDoctorId(request.getDoctorId());
        schedule.setPatientId(request.getPatientId());
        schedule.setScheduledDate(request.getScheduledDate());
        schedule.setRoomId(request.getRoomId());
        schedule.setNotes(request.getNotes());
        schedule.setTreatmentType(request.getTreatmentType());
        schedule.setDeadline(request.getDeadline());
        schedule.setGracePeriodDays(request.getGracePeriodDays());
        schedule.setStatus("scheduled");
        // BaseEntity s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω createdAt, updatedAt, createdBy, updatedBy
        
        TreatmentSchedule saved = treatmentScheduleRepository.save(schedule);
        
        // G·ª≠i email th√¥ng b√°o l·ªãch h·∫πn cho phase
        try {
            sendScheduleNotificationEmail(saved);
            log.info("Email notification sent for treatment schedule: {}", saved.getScheduleId());
        } catch (Exception e) {
            log.error("Error sending email notification for schedule: {}", e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o schedule
        }
        
        return ResponseEntity.ok(saved);
    }
    
    /**
     * ‚úÖ Ki·ªÉm tra conflict l·ªãch h·∫πn
     */
    private ResponseEntity<?> checkScheduleConflict(TreatmentScheduleRequest request) {
        try {
            LocalDateTime scheduledDate = request.getScheduledDate();
            UUID doctorId = request.getDoctorId();
            
            // 1. Ki·ªÉm tra xung ƒë·ªôt v·ªõi appointment th√¥ng th∆∞·ªùng
            boolean appointmentConflict = appointmentRepository.existsByDoctorIdAndAppointmentTime(doctorId, scheduledDate);
            if (appointmentConflict) {
                log.warn("Appointment conflict detected for doctor {} at {}", doctorId, scheduledDate);
                return ResponseEntity.badRequest().body("B√°c sƒ© ƒë√£ c√≥ l·ªãch h·∫πn v√†o th·ªùi gian n√†y");
            }
            
            // 2. Ki·ªÉm tra xung ƒë·ªôt v·ªõi treatment schedule kh√°c - B·ªé QUA
            // Kh√¥ng ki·ªÉm tra treatment_schedule ƒë·ªÉ tr√°nh conflict
            
            // 3. Ki·ªÉm tra xem b√°c sƒ© c√≥ l·ªãch l√†m vi·ªác v√†o ng√†y n√†y kh√¥ng (kh√¥ng c·∫ßn ki·ªÉm tra gi·ªù c·ª• th·ªÉ)
            int dayOfWeek = scheduledDate.getDayOfWeek().getValue();
            List<DoctorWorkSchedule> workSchedules = doctorWorkScheduleRepository.findByDoctorIdAndDayOfWeek(doctorId, dayOfWeek);
            
            boolean hasWorkSchedule = workSchedules.stream()
                .anyMatch(schedule -> "active".equalsIgnoreCase(schedule.getStatus()) || "pending".equalsIgnoreCase(schedule.getStatus()));
            
            if (!hasWorkSchedule) {
                log.warn("No active work schedule found for doctor {} on day {}", doctorId, dayOfWeek);
                return ResponseEntity.badRequest().body("B√°c sƒ© kh√¥ng c√≥ l·ªãch l√†m vi·ªác v√†o ng√†y n√†y");
            }
            
            log.info("No conflict detected for doctor {} at {}", doctorId, scheduledDate);
            return null; // Kh√¥ng c√≥ conflict
            
        } catch (Exception e) {
            log.error("Error checking schedule conflict: {}", e.getMessage());
            return ResponseEntity.internalServerError().body("L·ªói ki·ªÉm tra l·ªãch h·∫πn: " + e.getMessage());
        }
    }
    
    private void sendScheduleNotificationEmail(TreatmentSchedule schedule) {
        try {
            // L·∫•y th√¥ng tin b·ªánh nh√¢n v√† b√°c sƒ©
            User patient = userRepository.findById(schedule.getPatientId())
                    .orElseThrow(() -> new RuntimeException("Patient not found: " + schedule.getPatientId()));
            
            User doctor = userRepository.findById(schedule.getDoctorId())
                    .orElseThrow(() -> new RuntimeException("Doctor not found: " + schedule.getDoctorId()));
            
            // G·ª≠i email th√¥ng b√°o l·ªãch h·∫πn
            emailService.sendScheduleNotification(patient, doctor, schedule);
            
        } catch (Exception e) {
            log.error("Error in sendScheduleNotificationEmail: {}", e.getMessage());
            throw e;
        }
    }

    // üÜï GET API: L·∫•y t·∫•t c·∫£ l·ªãch h·∫πn c·ªßa b·ªánh nh√¢n
    @GetMapping("/patient/{patientId}")
    @Operation(summary = "L·∫•y t·∫•t c·∫£ l·ªãch h·∫πn treatment schedule c·ªßa b·ªánh nh√¢n", 
               description = "B·ªánh nh√¢n v√† b√°c sƒ© ƒëi·ªÅu tr·ªã c√≥ th·ªÉ xem l·ªãch h·∫πn")
    @SecurityRequirement(name = "bearerAuth")
    public ResponseEntity<?> getTreatmentSchedulesByPatient(@PathVariable UUID patientId, 
                                                           HttpServletRequest request) {
        try {
            log.info("Getting treatment schedules for patient: {}", patientId);
            
            // L·∫•y th√¥ng tin user t·ª´ JWT ƒë·ªÉ ki·ªÉm tra quy·ªÅn
            String jwt = jwtUtil.extractJwtFromRequest(request);
            String currentUserId = jwtUtil.extractUserId(jwt);
            String userRole = jwtUtil.extractRole(jwt);
            
            // Ki·ªÉm tra quy·ªÅn: ch·ªâ b·ªánh nh√¢n ƒë√≥ ho·∫∑c b√°c sƒ© ƒëi·ªÅu tr·ªã m·ªõi ƒë∆∞·ª£c xem
            if (!canAccessPatientSchedules(currentUserId, userRole, patientId)) {
                log.warn("User {} with role {} not authorized to access patient {} schedules", 
                        currentUserId, userRole, patientId);
                return ResponseEntity.status(403).body(
                    new GenericResponse<>(false, 
                        new MessageDTO("FORBIDDEN", "B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch h·∫πn c·ªßa b·ªánh nh√¢n n√†y"), 
                        null, null));
            }
            
            // L·∫•y t·∫•t c·∫£ l·ªãch h·∫πn c·ªßa b·ªánh nh√¢n, s·∫Øp x·∫øp theo ng√†y gi·ªù gi·∫£m d·∫ßn
            List<TreatmentSchedule> schedules = treatmentScheduleRepository
                .findByPatientIdOrderByScheduledDateDesc(patientId);
            
            log.info("Found {} treatment schedules for patient: {}", schedules.size(), patientId);
            
            return ResponseEntity.ok(new GenericResponse<>(true, 
                new MessageDTO("SUCCESS", "L·∫•y danh s√°ch l·ªãch h·∫πn th√†nh c√¥ng"), 
                null, schedules));
                
        } catch (Exception e) {
            log.error("Error getting treatment schedules for patient {}: {}", patientId, e.getMessage());
            return ResponseEntity.internalServerError().body(
                new GenericResponse<>(false, 
                    new MessageDTO("ERROR", "L·ªói khi l·∫•y danh s√°ch l·ªãch h·∫πn: " + e.getMessage()), 
                    null, null));
        }
    }

    // üÜï PUT API: C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn (ch·ªâ b√°c sƒ©)
    @PutMapping("/{scheduleId}/status")
    @DoctorOnly
    @Operation(summary = "C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn treatment schedule", 
               description = "Ch·ªâ b√°c sƒ© ƒëi·ªÅu tr·ªã m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t tr·∫°ng th√°i")
    @SecurityRequirement(name = "bearerAuth")
    public ResponseEntity<?> updateScheduleStatus(@PathVariable UUID scheduleId,
                                                 @Valid @RequestBody ScheduleStatusUpdateRequest request,
                                                 HttpServletRequest httpRequest) {
        try {
            log.info("Updating schedule status: {} to {}", scheduleId, request.getStatus());
            
            // L·∫•y th√¥ng tin user t·ª´ JWT
            String jwt = jwtUtil.extractJwtFromRequest(httpRequest);
            String doctorId = jwtUtil.extractUserId(jwt);
            
            // T√¨m l·ªãch h·∫πn
            TreatmentSchedule schedule = treatmentScheduleRepository.findById(scheduleId)
                .orElseThrow(() -> new AppException("SCHEDULE_NOT_FOUND", "Kh√¥ng t√¨m th·∫•y l·ªãch h·∫πn"));
            
            // Ki·ªÉm tra quy·ªÅn: ch·ªâ b√°c sƒ© ƒëi·ªÅu tr·ªã m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
            if (!schedule.getDoctorId().toString().equals(doctorId)) {
                log.warn("Doctor {} not authorized to update schedule {} (belongs to doctor {})", 
                        doctorId, scheduleId, schedule.getDoctorId());
                return ResponseEntity.status(403).body(
                    new GenericResponse<>(false, 
                        new MessageDTO("FORBIDDEN", "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t l·ªãch h·∫πn n√†y"), 
                        null, null));
            }
            
            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            String oldStatus = schedule.getStatus();
            schedule.setStatus(request.getStatus());
            
            // C·∫≠p nh·∫≠t th·ªùi gian ho√†n th√†nh n·∫øu status = 'completed'
            if ("completed".equals(request.getStatus())) {
                schedule.setCompletedAt(request.getCompletedAt() != null ? 
                    request.getCompletedAt() : LocalDateTime.now());
            }
            
            // C·∫≠p nh·∫≠t ghi ch√∫ n·∫øu c√≥
            if (request.getNotes() != null && !request.getNotes().trim().isEmpty()) {
                schedule.setNotes(request.getNotes());
            }
            
            // L∆∞u thay ƒë·ªïi
            TreatmentSchedule updatedSchedule = treatmentScheduleRepository.save(schedule);
            
            log.info("Schedule {} status updated from {} to {} by doctor {}", 
                    scheduleId, oldStatus, request.getStatus(), doctorId);
            
            return ResponseEntity.ok(new GenericResponse<>(true, 
                new MessageDTO("SUCCESS", "C·∫≠p nh·∫≠t tr·∫°ng th√°i l·ªãch h·∫πn th√†nh c√¥ng"), 
                null, updatedSchedule));
                
        } catch (AppException e) {
            log.error("AppException updating schedule status: {}", e.getMessage());
            return ResponseEntity.badRequest().body(
                new GenericResponse<>(false, 
                    new MessageDTO("ERROR", e.getMessage()), 
                    null, null));
        } catch (Exception e) {
            log.error("Error updating schedule status: {}", e.getMessage());
            return ResponseEntity.internalServerError().body(
                new GenericResponse<>(false, 
                    new MessageDTO("ERROR", "L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i: " + e.getMessage()), 
                    null, null));
        }
    }

    // üÜï Helper method: Ki·ªÉm tra quy·ªÅn truy c·∫≠p l·ªãch h·∫πn c·ªßa b·ªánh nh√¢n
    private boolean canAccessPatientSchedules(String currentUserId, String userRole, UUID patientId) {
        // B·ªánh nh√¢n c√≥ th·ªÉ xem l·ªãch h·∫πn c·ªßa ch√≠nh m√¨nh
        if ("PATIENT".equals(userRole) || "CUSTOMER".equals(userRole)) {
            return currentUserId.equals(patientId.toString());
        }
        
        // B√°c sƒ© c√≥ th·ªÉ xem l·ªãch h·∫πn c·ªßa b·ªánh nh√¢n m√† m√¨nh ƒëi·ªÅu tr·ªã
        if ("DOCTOR".equals(userRole)) {
            // Ki·ªÉm tra xem b√°c sƒ© c√≥ ƒëi·ªÅu tr·ªã b·ªánh nh√¢n n√†y kh√¥ng
            List<TreatmentSchedule> doctorSchedules = treatmentScheduleRepository
                .findByDoctorIdOrderByScheduledDateDesc(UUID.fromString(currentUserId));
            
            return doctorSchedules.stream()
                .anyMatch(schedule -> schedule.getPatientId().equals(patientId));
        }
        
        // Admin c√≥ th·ªÉ xem t·∫•t c·∫£
        if ("ADMIN".equals(userRole)) {
            return true;
        }
        
        return false;
    }
} 