import React, { useState, useEffect, useContext } from "react";
import {
  Card,
  Form,
  Input,
  InputNumber,
  Select,
  DatePicker,
  Upload,
  Button,
  Row,
  Col,
  Divider,
  Tag,
  Space,
  message,
  Table,
  Typography,
  Alert,
  Descriptions,
  Badge,
} from "antd";
import {
  UploadOutlined,
  PlusOutlined,
  DeleteOutlined,
  EditOutlined,
  CheckCircleOutlined,
  PrinterOutlined,
} from "@ant-design/icons";
import { examinationAPI } from "../../../services/treatmentAPI";
import { UserContext } from "../../../context/UserContext";
import { treatmentStateManager } from "../../../utils/treatmentStateManager";

const { TextArea } = Input;
const { Option } = Select;
const { Title, Text } = Typography;

const ExaminationForm = ({
  patientId,
  onNext,
  patientInfo,
  existingData,
  isEditing,
}) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const { user } = useContext(UserContext);
  const [symptoms, setSymptoms] = useState([]);
  const [labResults, setLabResults] = useState({});
  const [attachments, setAttachments] = useState([]);
  const [isCompleted, setIsCompleted] = useState(false);
  const [submittedData, setSubmittedData] = useState(null);

  // Load existing data or draft when component initializes
  useEffect(() => {
    // Priority: completed result > existing data (when editing) > draft

    // 1. Check for saved completed examination result
    const completedKey = `examination_completed_${patientId}`;
    const savedCompleted = localStorage.getItem(completedKey);
    if (savedCompleted) {
      try {
        const completedData = JSON.parse(savedCompleted);
        // Restore completed state
        setIsCompleted(true);
        setSubmittedData(completedData);

        // Also populate form for potential editing
        form.setFieldsValue({
          diagnosis: completedData.diagnosis,
          recommendations: completedData.recommendations,
          bloodPressure: completedData.clinicalSigns?.bloodPressure,
          temperature: completedData.clinicalSigns?.temperature,
          heartRate: completedData.clinicalSigns?.heartRate,
          weight: completedData.clinicalSigns?.weight,
          height: completedData.clinicalSigns?.height,
          ultrasound: completedData.labResults?.ultrasound,
          notes: completedData.notes,
        });
        setSymptoms(completedData.symptoms || []);
        setLabResults(completedData.labResults || {});

        // message.success("üìã ƒê√£ kh√¥i ph·ª•c k·∫øt qu·∫£ kh√°m ƒë√£ ho√†n th√†nh");
        return;
      } catch (error) {
        console.error("Error loading completed examination:", error);
      }
    }

    // 2. Fall back to editing existing data
    if (existingData && isEditing) {
      form.setFieldsValue({
        diagnosis: existingData.diagnosis,
        recommendations: existingData.recommendations,
        bloodPressure: existingData.clinicalSigns?.bloodPressure,
        temperature: existingData.clinicalSigns?.temperature,
        heartRate: existingData.clinicalSigns?.heartRate,
        weight: existingData.clinicalSigns?.weight,
        height: existingData.clinicalSigns?.height,
        ultrasound: existingData.labResults?.ultrasound,
        notes: existingData.notes,
      });
      setSymptoms(existingData.symptoms || []);
      setLabResults(existingData.labResults || {});
      // message.info("üìù ƒêang ch·ªânh s·ª≠a k·∫øt qu·∫£ kh√°m hi·ªán c√≥");
      return;
    }

    // 3. Fall back to draft
    const draftKey = `examination_draft_${patientId}`;
    const savedDraft = localStorage.getItem(draftKey);
    if (savedDraft) {
      try {
        const draft = JSON.parse(savedDraft);
        form.setFieldsValue(draft);
        setSymptoms(draft.symptoms || []);
        setLabResults(draft.labResults || {});
        // message.info(`ƒê√£ t·∫£i b·∫£n nh√°p l∆∞u l√∫c: ${draft.savedAt}`);
      } catch (error) {
        console.error("Error loading draft:", error);
      }
    }
  }, [patientId, form, existingData, isEditing]);

  // Danh s√°ch tri·ªáu ch·ª©ng th∆∞·ªùng g·∫∑p
  const commonSymptoms = [
    "ƒëau b·ª•ng d∆∞·ªõi",
    "r·ªëi lo·∫°n kinh nguy·ªát",
    "ra m√°u b·∫•t th∆∞·ªùng",
    "ƒëau khi quan h·ªá",
    "v√¥ kinh",
    "kinh nguy·ªát kh√¥ng ƒë·ªÅu",
    "ƒëau l∆∞ng",
    "bu·ªìn n√¥n",
    "cƒÉng t·ª©c v√∫",
    "m·ªát m·ªèi",
  ];

  // C·∫•u h√¨nh x√©t nghi·ªám m√°u
  const bloodTestConfig = [
    { key: "FSH", label: "FSH (mIU/mL)", normalRange: "3.5-12.5" },
    { key: "LH", label: "LH (mIU/mL)", normalRange: "2.4-12.6" },
    { key: "E2", label: "Estradiol (pg/mL)", normalRange: "12.5-166.0" },
    {
      key: "testosterone",
      label: "Testosterone (ng/mL)",
      normalRange: "0.1-0.8",
    },
    { key: "AMH", label: "AMH (ng/mL)", normalRange: "1.0-4.0" },
    { key: "prolactin", label: "Prolactin (ng/mL)", normalRange: "4.8-23.3" },
  ];

  const handleSymptomAdd = (symptom) => {
    if (!symptoms.includes(symptom)) {
      setSymptoms([...symptoms, symptom]);
    }
  };

  const handleSymptomRemove = (symptom) => {
    setSymptoms(symptoms.filter((s) => s !== symptom));
  };

  const handleLabResultChange = (test, value) => {
    setLabResults((prev) => ({
      ...prev,
      bloodTest: {
        ...prev.bloodTest,
        [test]: value,
      },
    }));
  };

  const handleSubmit = async (values) => {
    try {
      setLoading(true);

      // Validate required fields
      if (!values.diagnosis || !values.recommendations) {
        // message.error("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß ch·∫©n ƒëo√°n v√† khuy·∫øn ngh·ªã");
        return;
      }

      const examinationData = {
        id: existingData?.id || Date.now().toString(),
        patientId,
        doctorId: user?.id || "defaultDoctor",
        doctorName: user?.fullName || "B√°c sƒ©",
        examinationDate:
          existingData?.examinationDate ||
          new Date().toISOString().split("T")[0],
        symptoms,
        clinicalSigns: {
          bloodPressure: values.bloodPressure,
          temperature: values.temperature,
          heartRate: values.heartRate,
          weight: values.weight,
          height: values.height,
        },
        labResults: {
          ...labResults,
          ultrasound: values.ultrasound,
        },
        diagnosis: values.diagnosis,
        recommendations: values.recommendations,
        attachments: attachments.map((file) => file.name),
        notes: values.notes,
        status: "completed",
        // Enhanced metadata
        recommendedService: getRecommendedService(values.diagnosis),
        isEdited: isEditing,
        editedAt: isEditing ? new Date().toISOString() : undefined,
        originalData: isEditing ? existingData : undefined,
        createdAt: existingData?.createdAt || new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      // Always set completed and show results regardless of API status
      setIsCompleted(true);
      setSubmittedData(examinationData);

      let savedResult = null;

      // Try to save to API, but don't block UI if it fails
      try {
        savedResult = await examinationAPI.createExaminationResult(
          examinationData
        );

        // Clear draft after successful save (only if not editing)
        // But keep the completed examination state for persistence
        if (!isEditing) {
          localStorage.removeItem(`examination_draft_${patientId}`);
        }

        const actionText = isEditing ? "C·∫≠p nh·∫≠t" : "L∆∞u";
        // message.success(
        //   `üéâ ${actionText} k·∫øt qu·∫£ kh√°m th√†nh c√¥ng! ${
        //     isEditing ? "" : "Hi·ªÉn th·ªã k·∫øt qu·∫£ b√™n d∆∞·ªõi."
        //   }`
        // );

        // Update with saved result if API succeeded
        setSubmittedData(savedResult || examinationData);

        // Store completed examination for TreatmentProcess sync
        localStorage.setItem(
          `examination_completed_${patientId}`,
          JSON.stringify({
            ...(savedResult || examinationData),
            completedAt: new Date().toISOString(),
            fromStandalonePage: true,
            apiSaved: true,
          })
        );

        // Dispatch custom event to notify TreatmentProcess
        const syncEvent = new CustomEvent("examinationCompleted", {
          detail: {
            patientId,
            examinationData: savedResult || examinationData,
          },
        });
        window.dispatchEvent(syncEvent);

        // Update treatment state manager
        treatmentStateManager.updateExamination(
          patientId,
          savedResult || examinationData
        );
      } catch (apiError) {
        console.warn("API save failed, but showing results locally:", apiError);
        // message.warning(
        //   "‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi server nh∆∞ng k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã. D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi."
        // );

        // Store in localStorage as backup
        localStorage.setItem(
          `examination_backup_${patientId}`,
          JSON.stringify({
            ...examinationData,
            savedAt: new Date().toISOString(),
            status: "offline_backup",
          })
        );

        // Also store as completed examination for TreatmentProcess sync
        localStorage.setItem(
          `examination_completed_${patientId}`,
          JSON.stringify({
            ...examinationData,
            completedAt: new Date().toISOString(),
            fromStandalonePage: true,
          })
        );

        // Dispatch custom event to notify TreatmentProcess
        const syncEvent = new CustomEvent("examinationCompleted", {
          detail: {
            patientId,
            examinationData: examinationData,
          },
        });
        window.dispatchEvent(syncEvent);

        // Update treatment state manager (even if API failed)
        treatmentStateManager.updateExamination(patientId, examinationData);
      }

      // Automatically notify TreatmentProcess that examination is completed
      if (onNext) {
        onNext(savedResult || examinationData);
      }
    } catch (error) {
      console.error("Critical error in examination form:", error);
      // message.error("‚ùå C√≥ l·ªói nghi√™m tr·ªçng. Vui l√≤ng t·∫£i l·∫°i trang!");
    } finally {
      setLoading(false);
    }
  };

  // Helper function to recommend service based on diagnosis
  const getRecommendedService = (diagnosis) => {
    const diagnosisLower = diagnosis.toLowerCase();

    if (
      diagnosisLower.includes("t·∫Øc ·ªëng d·∫´n tr·ª©ng") ||
      diagnosisLower.includes("tu·ªïi cao") ||
      diagnosisLower.includes("amh th·∫•p") ||
      diagnosisLower.includes("ph√¥i k√©m")
    ) {
      return "IVF";
    } else if (
      diagnosisLower.includes("r·ªëi lo·∫°n r·ª•ng tr·ª©ng") ||
      diagnosisLower.includes("tinh tr√πng y·∫øu") ||
      diagnosisLower.includes("v√¥ sinh nguy√™n ph√°t nh·∫π")
    ) {
      return "IUI";
    }

    return "IVF"; // Default recommendation
  };

  const uploadProps = {
    beforeUpload: (file) => {
      setAttachments((prev) => [...prev, file]);
      return false; // Prevent auto upload
    },
    onRemove: (file) => {
      setAttachments((prev) => prev.filter((f) => f.uid !== file.uid));
    },
    fileList: attachments,
  };

  return (
    <div style={{ padding: "24px", background: "#f5f5f5", minHeight: "100vh" }}>
      <Card>
        <Title level={2}>Kh√°m L√¢m S√†ng & Nh·∫≠p K·∫øt Qu·∫£</Title>

        {/* Th√¥ng tin b·ªánh nh√¢n */}
        <Card size="small" style={{ marginBottom: 24, background: "#f9f9f9" }}>
          <Title level={4}>Th√¥ng tin b·ªánh nh√¢n</Title>
          <Row gutter={16}>
            <Col span={6}>
              <Text strong>H·ªç t√™n:</Text> {patientInfo?.name || "N/A"}
            </Col>
            <Col span={6}>
              <Text strong>Gi·ªõi t√≠nh:</Text>{" "}
              {patientInfo?.gender === "male" ? "Nam" : "N·ªØ"}
            </Col>
            <Col span={6}>
              <Text strong>Tu·ªïi:</Text> {patientInfo?.age || "N/A"}
            </Col>
            <Col span={6}>
              <Text strong>Li√™n h·ªá:</Text> {patientInfo?.contact || "N/A"}
            </Col>
          </Row>
        </Card>

        {/* Ch·ªâ hi·ªÉn th·ªã form khi ch∆∞a ho√†n th√†nh */}
        {!isCompleted && (
          <Form
            form={form}
            layout="vertical"
            onFinish={handleSubmit}
            style={{ marginTop: 24 }}
          >
            <Row gutter={24}>
              {/* C·ªôt tr√°i - Tri·ªáu ch·ª©ng v√† d·∫•u hi·ªáu */}
              <Col span={12}>
                {/* Tri·ªáu ch·ª©ng */}
                <Card
                  title="Tri·ªáu ch·ª©ng"
                  size="small"
                  style={{ marginBottom: 16 }}
                >
                  <Space wrap style={{ marginBottom: 12 }}>
                    {commonSymptoms.map((symptom) => (
                      <Tag
                        key={symptom}
                        color={symptoms.includes(symptom) ? "blue" : "default"}
                        style={{ cursor: "pointer" }}
                        onClick={() =>
                          symptoms.includes(symptom)
                            ? handleSymptomRemove(symptom)
                            : handleSymptomAdd(symptom)
                        }
                      >
                        {symptom}
                      </Tag>
                    ))}
                  </Space>
                  <Input
                    placeholder="Nh·∫≠p tri·ªáu ch·ª©ng kh√°c..."
                    onPressEnter={(e) => {
                      if (e.target.value.trim()) {
                        handleSymptomAdd(e.target.value.trim());
                        e.target.value = "";
                      }
                    }}
                  />
                  <div style={{ marginTop: 8 }}>
                    <Text strong>Tri·ªáu ch·ª©ng ƒë√£ ch·ªçn:</Text>
                    <div style={{ marginTop: 4 }}>
                      {symptoms.map((symptom) => (
                        <Tag
                          key={symptom}
                          closable
                          color="blue"
                          onClose={() => handleSymptomRemove(symptom)}
                        >
                          {symptom}
                        </Tag>
                      ))}
                    </div>
                  </div>
                </Card>

                {/* D·∫•u hi·ªáu l√¢m s√†ng */}
                <Card title="D·∫•u hi·ªáu l√¢m s√†ng" size="small">
                  <Row gutter={12}>
                    <Col span={12}>
                      <Form.Item label="Huy·∫øt √°p" name="bloodPressure">
                        <Input placeholder="120/80" />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item label="Nhi·ªát ƒë·ªô (¬∞C)" name="temperature">
                        <InputNumber
                          min={35}
                          max={42}
                          step={0.1}
                          style={{ width: "100%" }}
                        />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item label="Nh·ªãp tim (l·∫ßn/ph√∫t)" name="heartRate">
                        <InputNumber
                          min={40}
                          max={200}
                          style={{ width: "100%" }}
                        />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item label="C√¢n n·∫∑ng (kg)" name="weight">
                        <InputNumber
                          min={30}
                          max={200}
                          style={{ width: "100%" }}
                        />
                      </Form.Item>
                    </Col>
                    <Col span={12}>
                      <Form.Item label="Chi·ªÅu cao (cm)" name="height">
                        <InputNumber
                          min={140}
                          max={220}
                          style={{ width: "100%" }}
                        />
                      </Form.Item>
                    </Col>
                  </Row>
                </Card>
              </Col>

              {/* C·ªôt ph·∫£i - X√©t nghi·ªám */}
              <Col span={12}>
                {/* X√©t nghi·ªám m√°u */}
                <Card
                  title="X√©t nghi·ªám m√°u"
                  size="small"
                  style={{ marginBottom: 16 }}
                >
                  <Row gutter={8}>
                    {bloodTestConfig.map((test) => (
                      <Col span={12} key={test.key} style={{ marginBottom: 8 }}>
                        <Text>{test.label}</Text>
                        <InputNumber
                          size="small"
                          placeholder={test.normalRange}
                          style={{ width: "100%", marginTop: 4 }}
                          onChange={(value) =>
                            handleLabResultChange(test.key, value)
                          }
                        />
                        <Text type="secondary" style={{ fontSize: "11px" }}>
                          B√¨nh th∆∞·ªùng: {test.normalRange}
                        </Text>
                      </Col>
                    ))}
                  </Row>
                </Card>

                {/* Si√™u √¢m */}
                <Card title="K·∫øt qu·∫£ si√™u √¢m" size="small">
                  <Form.Item name="ultrasound">
                    <TextArea rows={4} placeholder="M√¥ t·∫£ k·∫øt qu·∫£ si√™u √¢m..." />
                  </Form.Item>
                </Card>
              </Col>
            </Row>

            <Divider />

            {/* Chu·∫©n ƒëo√°n v√† khuy·∫øn ngh·ªã */}
            <Row gutter={24}>
              <Col span={12}>
                <Form.Item
                  label="Chu·∫©n ƒëo√°n l√¢m s√†ng"
                  name="diagnosis"
                  rules={[
                    { required: true, message: "Vui l√≤ng nh·∫≠p chu·∫©n ƒëo√°n" },
                  ]}
                >
                  <TextArea rows={3} placeholder="Nh·∫≠p chu·∫©n ƒëo√°n..." />
                </Form.Item>
              </Col>
              <Col span={12}>
                <Form.Item label="Khuy·∫øn ngh·ªã ƒëi·ªÅu tr·ªã" name="recommendations">
                  <TextArea rows={3} placeholder="Nh·∫≠p khuy·∫øn ngh·ªã..." />
                </Form.Item>
              </Col>
            </Row>

            {/* Upload file ƒë√≠nh k√®m */}
            <Form.Item label="File ƒë√≠nh k√®m (·∫£nh si√™u √¢m, k·∫øt qu·∫£ x√©t nghi·ªám...)">
              <Upload {...uploadProps} multiple>
                <Button icon={<UploadOutlined />}>Ch·ªçn file</Button>
              </Upload>
            </Form.Item>

            {/* Ghi ch√∫ */}
            <Form.Item label="Ghi ch√∫" name="notes">
              <TextArea rows={2} placeholder="Ghi ch√∫ th√™m..." />
            </Form.Item>

            {/* B√°c sƒ© kh√°m - Hi·ªÉn th·ªã th√¥ng tin b√°c sƒ© ƒë√£ ƒëƒÉng nh·∫≠p */}
            <Card
              size="small"
              style={{ background: "#f0f8ff", marginBottom: 16 }}
            >
              <Row align="middle" gutter={16}>
                <Col>
                  <div
                    style={{
                      width: 40,
                      height: 40,
                      borderRadius: "50%",
                      background: "#1890ff",
                      display: "flex",
                      alignItems: "center",
                      justifyContent: "center",
                      color: "white",
                      fontWeight: "bold",
                    }}
                  >
                    {user?.fullName?.charAt(0) || "BS"}
                  </div>
                </Col>
                <Col flex={1}>
                  <div>
                    <Text strong style={{ fontSize: "16px" }}>
                      B√°c sƒ© ph·ª• tr√°ch: {user?.fullName || "B√°c sƒ© chuy√™n khoa"}
                    </Text>
                    <br />
                    <Text type="secondary">
                      Chuy√™n khoa:{" "}
                      {user?.specialty || "S·∫£n ph·ª• khoa & H·ªó tr·ª£ sinh s·∫£n"}
                    </Text>
                    <br />
                    <Text type="secondary">
                      ID: {user?.id || "BS001"} | ƒê√£ ƒëƒÉng nh·∫≠p
                    </Text>
                  </div>
                </Col>
              </Row>
            </Card>

            <div style={{ textAlign: "right", marginTop: 24 }}>
              <Space>
                <Button
                  onClick={() => {
                    const draftData = form.getFieldsValue();
                    localStorage.setItem(
                      `examination_draft_${patientId}`,
                      JSON.stringify({
                        ...draftData,
                        symptoms,
                        labResults,
                        savedAt: new Date().toLocaleString(),
                      })
                    );
                    // message.success("ƒê√£ l∆∞u b·∫£n nh√°p");
                  }}
                >
                  üíæ L∆∞u nh√°p
                </Button>

                {/* N√∫t test nhanh v·ªõi d·ªØ li·ªáu m·∫´u */}
                <Button
                  type="dashed"
                  onClick={() => {
                    form.setFieldsValue({
                      diagnosis: "V√¥ sinh nguy√™n ph√°t",
                      recommendations: "ƒêi·ªÅu tr·ªã IVF",
                      bloodPressure: "120/80",
                      temperature: 36.5,
                      heartRate: 72,
                      weight: 55,
                      height: 160,
                      ultrasound:
                        "Bu·ªìng tr·ª©ng b√¨nh th∆∞·ªùng, n·ªôi m·∫°c t·ª≠ cung d√†y 8mm",
                      notes: "B·ªánh nh√¢n c·∫ßn theo d√µi trong qu√° tr√¨nh ƒëi·ªÅu tr·ªã",
                    });
                    setSymptoms(["r·ªëi lo·∫°n kinh nguy·ªát", "kh√≥ th·ª• thai"]);
                    setLabResults({
                      bloodTest: {
                        FSH: "8.5",
                        LH: "6.2",
                        E2: "45.0",
                        AMH: "2.1",
                      },
                    });
                    // message.info("ƒê√£ ƒëi·ªÅn d·ªØ li·ªáu m·∫´u");
                  }}
                >
                  üß™ ƒêi·ªÅn m·∫´u test
                </Button>

                {/* N√∫t test sync nhanh */}
                <Button
                  type="primary"
                  ghost
                  onClick={() => {
                    const testExamData = {
                      id: "test-exam-" + Date.now(),
                      patientId,
                      doctorId: user?.id || "testDoctor",
                      doctorName: user?.fullName || "B√°c sƒ© Test",
                      examinationDate: new Date().toISOString().split("T")[0],
                      symptoms: ["r·ªëi lo·∫°n kinh nguy·ªát", "kh√≥ th·ª• thai"],
                      clinicalSigns: {
                        bloodPressure: "120/80",
                        temperature: 36.5,
                        heartRate: 72,
                        weight: 55,
                        height: 160,
                      },
                      labResults: {
                        bloodTest: {
                          FSH: "8.5",
                          LH: "6.2",
                          E2: "45.0",
                          AMH: "2.1",
                        },
                        ultrasound:
                          "Bu·ªìng tr·ª©ng b√¨nh th∆∞·ªùng, n·ªôi m·∫°c t·ª≠ cung d√†y 8mm",
                      },
                      diagnosis: "V√¥ sinh nguy√™n ph√°t - TEST PERSISTENT",
                      recommendations: "ƒêi·ªÅu tr·ªã IVF - TEST PERSISTENCE",
                      notes:
                        "Test d·ªØ li·ªáu persistent - s·∫Ω gi·ªØ nguy√™n khi chuy·ªÉn trang",
                      status: "completed",
                      recommendedService: "IVF",
                      completedAt: new Date().toISOString(),
                      fromStandalonePage: true,
                      isTest: true,
                    };

                    // Set local state immediately
                    setIsCompleted(true);
                    setSubmittedData(testExamData);

                    // Store in localStorage for persistence
                    localStorage.setItem(
                      `examination_completed_${patientId}`,
                      JSON.stringify(testExamData)
                    );

                    // Dispatch sync event
                    const syncEvent = new CustomEvent("examinationCompleted", {
                      detail: {
                        patientId,
                        examinationData: testExamData,
                      },
                    });
                    window.dispatchEvent(syncEvent);

                    // message.success(
                    //   "üíæ Test ho√†n th√†nh! D·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c gi·ªØ khi chuy·ªÉn trang"
                    // );
                  }}
                >
                  üíæ Test Persistent State
                </Button>

                <Button
                  type="primary"
                  htmlType="submit"
                  loading={loading}
                  size="large"
                  style={{ minWidth: "200px" }}
                >
                  ‚úÖ Ho√†n th√†nh kh√°m & L·∫≠p ph√°c ƒë·ªì
                </Button>
              </Space>
            </div>
          </Form>
        )}
      </Card>

      {isCompleted && submittedData && (
        <div style={{ marginTop: 24 }}>
          <Alert
            message="‚úÖ K·∫øt qu·∫£ kh√°m ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng"
            description="Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† s·∫µn s√†ng cho b∆∞·ªõc ti·∫øp theo. B·∫°n c√≥ th·ªÉ xem l·∫°i ho·∫∑c ch·ªânh s·ª≠a th√¥ng tin b√™n d∆∞·ªõi."
            type="success"
            showIcon
            style={{ marginBottom: 24 }}
          />

          {/* Th√¥ng tin kh√°m ƒë√£ ho√†n th√†nh */}
          <Card
            title={
              <Space>
                <CheckCircleOutlined style={{ color: "#52c41a" }} />
                <span>K·∫øt Qu·∫£ Kh√°m L√¢m S√†ng</span>
                <Badge status="success" text="ƒê√£ ho√†n th√†nh" />
              </Space>
            }
            extra={
              <Space>
                <Button
                  icon={<EditOutlined />}
                  onClick={() => {
                    // Reset completion state
                    setIsCompleted(false);
                    setSubmittedData(null);

                    // Remove completed state from localStorage
                    localStorage.removeItem(
                      `examination_completed_${patientId}`
                    );

                    // Form already has the data from useEffect, so no need to set again
                    // message.info("üîß ƒê√£ chuy·ªÉn sang ch·∫ø ƒë·ªô ch·ªânh s·ª≠a");
                  }}
                >
                  Ch·ªânh s·ª≠a
                </Button>
                <Button
                  icon={<PrinterOutlined />}
                  onClick={() => {
                    window.print();

                    // After printing, also trigger sync event
                    if (submittedData) {
                      const syncEvent = new CustomEvent("examinationPrinted", {
                        detail: {
                          patientId,
                          examinationData: submittedData,
                          action: "printed",
                        },
                      });
                      window.dispatchEvent(syncEvent);
                      // message.info(
                      //   "üìÑ ƒê√£ in k·∫øt qu·∫£ v√† ƒë·ªìng b·ªô v·ªõi quy tr√¨nh ƒëi·ªÅu tr·ªã"
                      // );
                    }
                  }}
                >
                  In k·∫øt qu·∫£
                </Button>

                <Button
                  danger
                  onClick={() => {
                    // Clear all data and start fresh
                    setIsCompleted(false);
                    setSubmittedData(null);
                    localStorage.removeItem(
                      `examination_completed_${patientId}`
                    );
                    localStorage.removeItem(`examination_draft_${patientId}`);
                    localStorage.removeItem(`examination_backup_${patientId}`);

                    form.resetFields();
                    setSymptoms([]);
                    setLabResults({});
                    setAttachments([]);

                    // message.warning(
                    //   "üóëÔ∏è ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu kh√°m v√† b·∫Øt ƒë·∫ßu l·∫°i"
                    // );
                  }}
                >
                  B·∫Øt ƒë·∫ßu l·∫°i
                </Button>
              </Space>
            }
            style={{ background: "#f6ffed", border: "1px solid #b7eb8f" }}
          >
            <Row gutter={24}>
              <Col span={12}>
                <Descriptions
                  title="Th√¥ng tin c∆° b·∫£n"
                  bordered
                  column={1}
                  size="small"
                >
                  <Descriptions.Item label="B·ªánh nh√¢n">
                    {patientInfo?.name}
                  </Descriptions.Item>
                  <Descriptions.Item label="Ng√†y kh√°m">
                    {submittedData.examinationDate}
                  </Descriptions.Item>
                  <Descriptions.Item label="B√°c sƒ© kh√°m">
                    {submittedData.doctorName}
                  </Descriptions.Item>
                  <Descriptions.Item label="Tr·∫°ng th√°i">
                    <Badge status="success" text="Ho√†n th√†nh" />
                  </Descriptions.Item>
                </Descriptions>
              </Col>

              <Col span={12}>
                <Descriptions
                  title="D·∫•u hi·ªáu l√¢m s√†ng"
                  bordered
                  column={1}
                  size="small"
                >
                  <Descriptions.Item label="Huy·∫øt √°p">
                    {submittedData.clinicalSigns?.bloodPressure || "Ch∆∞a ƒëo"}
                  </Descriptions.Item>
                  <Descriptions.Item label="Nhi·ªát ƒë·ªô">
                    {submittedData.clinicalSigns?.temperature
                      ? `${submittedData.clinicalSigns.temperature}¬∞C`
                      : "Ch∆∞a ƒëo"}
                  </Descriptions.Item>
                  <Descriptions.Item label="Nh·ªãp tim">
                    {submittedData.clinicalSigns?.heartRate
                      ? `${submittedData.clinicalSigns.heartRate} l·∫ßn/ph√∫t`
                      : "Ch∆∞a ƒëo"}
                  </Descriptions.Item>
                  <Descriptions.Item label="C√¢n n·∫∑ng">
                    {submittedData.clinicalSigns?.weight
                      ? `${submittedData.clinicalSigns.weight} kg`
                      : "Ch∆∞a ƒëo"}
                  </Descriptions.Item>
                  <Descriptions.Item label="Chi·ªÅu cao">
                    {submittedData.clinicalSigns?.height
                      ? `${submittedData.clinicalSigns.height} cm`
                      : "Ch∆∞a ƒëo"}
                  </Descriptions.Item>
                </Descriptions>
              </Col>
            </Row>

            <Divider />

            <Row gutter={24}>
              <Col span={24}>
                <Descriptions
                  title="Tri·ªáu ch·ª©ng v√† x√©t nghi·ªám"
                  bordered
                  column={2}
                  size="small"
                >
                  <Descriptions.Item label="Tri·ªáu ch·ª©ng" span={2}>
                    {submittedData.symptoms?.length > 0 ? (
                      <Space wrap>
                        {submittedData.symptoms.map((symptom, index) => (
                          <Tag key={index} color="blue">
                            {symptom}
                          </Tag>
                        ))}
                      </Space>
                    ) : (
                      "Kh√¥ng c√≥ tri·ªáu ch·ª©ng ghi nh·∫≠n"
                    )}
                  </Descriptions.Item>
                  <Descriptions.Item label="K·∫øt qu·∫£ x√©t nghi·ªám m√°u" span={2}>
                    {submittedData.labResults?.bloodTest ? (
                      <div>
                        {Object.entries(submittedData.labResults.bloodTest).map(
                          ([test, value]) => (
                            <div key={test}>
                              <Text strong>{test}:</Text> {value || "N/A"}
                            </div>
                          )
                        )}
                      </div>
                    ) : (
                      "Ch∆∞a c√≥ k·∫øt qu·∫£ x√©t nghi·ªám"
                    )}
                  </Descriptions.Item>
                  <Descriptions.Item label="K·∫øt qu·∫£ si√™u √¢m" span={2}>
                    {submittedData.labResults?.ultrasound ||
                      "Ch∆∞a c√≥ k·∫øt qu·∫£ si√™u √¢m"}
                  </Descriptions.Item>
                </Descriptions>
              </Col>
            </Row>

            <Divider />

            <Row gutter={24}>
              <Col span={24}>
                <Descriptions
                  title="K·∫øt lu·∫≠n v√† khuy·∫øn ngh·ªã"
                  bordered
                  column={1}
                  size="small"
                >
                  <Descriptions.Item label="Ch·∫©n ƒëo√°n l√¢m s√†ng">
                    <Text strong style={{ fontSize: "16px", color: "#1890ff" }}>
                      {submittedData.diagnosis}
                    </Text>
                  </Descriptions.Item>
                  <Descriptions.Item label="Khuy·∫øn ngh·ªã ƒëi·ªÅu tr·ªã">
                    <Text style={{ fontSize: "14px" }}>
                      {submittedData.recommendations}
                    </Text>
                  </Descriptions.Item>
                  <Descriptions.Item label="D·ªãch v·ª• ƒë∆∞·ª£c khuy·∫øn ngh·ªã">
                    <Tag
                      color={
                        submittedData.recommendedService === "IVF"
                          ? "red"
                          : "blue"
                      }
                      style={{ fontSize: "14px" }}
                    >
                      {submittedData.recommendedService}
                    </Tag>
                  </Descriptions.Item>
                  {submittedData.notes && (
                    <Descriptions.Item label="Ghi ch√∫">
                      {submittedData.notes}
                    </Descriptions.Item>
                  )}
                </Descriptions>
              </Col>
            </Row>

            <div style={{ textAlign: "center", marginTop: 24 }}>
              <Space>
                <Text type="secondary" style={{ fontSize: "16px" }}>
                  ‚úÖ Kh√°m l√¢m s√†ng ƒë√£ ho√†n th√†nh! T·ª± ƒë·ªông chuy·ªÉn sang b∆∞·ªõc l·∫≠p
                  ph√°c ƒë·ªì...
                </Text>
              </Space>
            </div>
          </Card>
        </div>
      )}
    </div>
  );
};

export default ExaminationForm;
